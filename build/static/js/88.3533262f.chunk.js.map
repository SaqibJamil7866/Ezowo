{"version":3,"sources":["views/pages/authentication/RegisterCover.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","t","msg","error","className","size","color","icon","defaultValues","first_name","last_name","title","email","password","RegisterCover","packageId","useParams","illustration","useSkin","skin","source","require","default","navigate","useNavigate","useForm","control","setError","handleSubmit","errors","formState","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","xs","md","tag","onSubmit","data","Object","values","every","field","length","postData","country","city","phone1","role_id","gender","present_address","permanent_address","package_id","billing_details","alert","processSignup","then","res","response","code","toast","process","catch","err","console","log","key","type","for","name","render","autoFocus","placeholder","invalid","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","renderIcon","defaultProps"],"mappings":"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","file":"static/js/88.3533262f.chunk.js","sourcesContent":["// ** React Imports\nimport { useParams, Link, useNavigate } from 'react-router-dom'\nimport { useForm, Controller } from 'react-hook-form'\nimport { useSkin } from '@hooks/useSkin'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { Row, Col, CardTitle, CardText, Form, Label, Input, Button } from 'reactstrap'\nimport toast from 'react-hot-toast'\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\nimport { processSignup } from \"../../../services/Apis\"\nimport Avatar from '@components/avatar'\nimport { Coffee, X } from 'react-feather'\n\nconst ToastContent = ({ t, msg, error }) => {\n  return (\n    <div className='d-flex'>\n      <div className='me-1'>\n        <Avatar size='sm' color={error ? 'danger' : 'success'} icon={<Coffee size={12} />} />\n      </div>\n      <div className='d-flex flex-column'>\n        <div className='d-flex justify-content-between'>\n          {/* <h6>{name}</h6> */}\n          {/* <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} /> */}\n        </div>\n        <span>{msg ? msg : 'Account signup successful!'}</span>\n      </div>\n    </div>\n  )\n}\nconst defaultValues = {\n  first_name: '',\n  last_name: '',\n  title: '',\n  email: '',\n  password: ''\n  // role_id: 2, DEMO\n}\nconst RegisterCover = () => {\n  \n  const packageId = useParams().packageId\n  const { skin } = useSkin()\n  const illustration = skin === 'dark' ? 'register-v2-dark.svg' : 'register-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n  // const dispatch = useDispatch()\n  const navigate = useNavigate()\n  // const ability = useContext(AbilityContext)\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n\n  const onSubmit = data => {\n    if (Object.values(data).every(field => field.length > 0)) {\n      const postData = {...data, \n        country: \"\",\n        city: \"\",\n        phone1: \"\",\n        role_id: 2,\n        gender: \"unknown\",\n        present_address: \"\",\n        permanent_address: null,\n        package_id: '',\n        billing_details: {\n          city: \"\",\n          country: \"\",\n            first_name: \"\",\n            last_name: \"\"\n        }\n      }\n      postData.package_id = packageId\n\n      // console.log(postData)\n      if (data.packageId) {\n        alert('Signup problem!')\n      }\n      processSignup(postData)\n        .then(res => {\n          if (res.response.code === 200) {\n            const data = res.response.data \n            toast(t => (\n              <ToastContent t={t} />\n            ))\n            navigate(`${process.env.PUBLIC_URL}/login`)\n          } else if (res.response.code === -1) {\n            toast(t => (\n              <ToastContent t={t} error={1} msg=\"Email already exists\" />\n            ))\n          }\n          \n        })\n        .catch(err => console.log('ERROR: ', err))\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual'\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ms-1'>Jira</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' xs='12' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='fw-bold mb-1'>\n              Adventure starts here 🚀\n            </CardTitle>\n            <CardText className='mb-2'>Make your app management easy and fun!</CardText>\n            <Form className='auth-register-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-fname'>\n                  First Name\n                </Label>\n                <Controller\n                  id='first_name'\n                  name='first_name'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='text'\n                      placeholder=''\n                      invalid={errors.first_name && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-lname'>\n                  Last Name\n                </Label>\n                <Controller\n                  id='last_name'\n                  name='last_name'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      type='text'\n                      placeholder=''\n                      invalid={errors.last_name && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-company'>\n                  Company Name\n                </Label>\n                <Controller\n                  id='title'\n                  name='title'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      type='text'\n                      placeholder=''\n                      invalid={errors.title && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='email'\n                  name='email'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      type='email'\n                      placeholder=''\n                      invalid={errors.email && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-password'>\n                  Password\n                </Label>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n              </div>\n              {/* <div className='form-check mb-1'>\n                <Input type='checkbox' id='terms' />\n                <Label className='form-check-label' for='terms'>\n                  I agree to\n                  <a className='ms-25' href='/' onClick={e => e.preventDefault()}>\n                    privacy policy & terms\n                  </a>\n                </Label>\n              </div> */}\n              <Button color='primary' block>\n                Sign up\n              </Button>\n            </Form>\n            <p className='text-center mt-2'>\n              <span className='me-25'>Already have an account?</span>\n              <Link to={`${process.env.PUBLIC_URL}/login`}>\n                <span>Sign in instead</span>\n              </Link>\n            </p>\n            {/* <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button color='facebook'>\n                <Facebook size={14} />\n              </Button>\n              <Button color='twitter'>\n                <Twitter size={14} />\n              </Button>\n              <Button color='google'>\n                <Mail size={14} />\n              </Button>\n              <Button className='me-0' color='github'>\n                <GitHub size={14} />\n              </Button>\n            </div> */}\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default RegisterCover\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}