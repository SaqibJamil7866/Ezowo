{"version":3,"sources":["views/apps/todo/Tasks.js","views/apps/todo/Sidebar.js","views/apps/todo/TaskSidebar.js","views/apps/todo/index.js"],"names":["Tasks","props","query","tasks","params","setSort","dispatch","setQuery","updateTask","selectTask","reOrderTasks","handleTaskSidebar","handleMainSidebar","handleSort","e","val","preventDefault","getTasks","sortBy","className","onClick","size","placeholder","value","onChange","target","q","tag","href","end","Link","to","options","wheelPropagation","containerRef","ref","_getBoundingClientRect","getBoundingClientRect","original","height","Math","floor","length","list","handle","setList","newState","map","item","index","obj","console","log","classnames","completed","is_completed","type","id","title","checked","stopPropagation","TodoSidebar","projects","setMainSidebar","mainSidebar","useState","selectedProject","setSelectedProject","useEffect","label","handleFilter","filter","project_id","handleActiveItem","show","color","block","style","paddingTop","for","name","isClearable","theme","selectThemeColors","handleProjectSelection","width","margin","classNamePrefix","active","ModalHeader","children","store","setDeleted","deleted","important","setImportant","deleteTask","isObjEmpty","selectedTask","TaskSidebar","open","addTask","tags","setTags","project","setProject","EditorState","createEmpty","desc","setDesc","setCompleted","Date","setDueDate","useForm","defaultValues","control","setError","setValue","clearErrors","handleSubmit","errors","formState","handleResetFields","descValue","createWithContent","ContentState","createFromText","note","is_important","is_deleted","string","push","charAt","toUpperCase","slice","isOpen","toggle","contentClassName","onOpened","error","_immutable","currentContent","blockMap","property","Object","keys","text","onClosed","modalClassName","onSubmit","data","newTaskTag","state","_list","_tail","array","outline","isDisabled","render","field","invalid","editorState","wrapperClassName","toolbar","inline","inDropdown","onEditorStateChange","TODO","projectsData","setProjectsData","sort","openTaskSidebar","setOpenTaskSidebar","useDispatch","useSelector","todo","paramsURL","useParams","getAllProjects","direction","then","res","result","response","code","pData","unshift","fetchProjects","Sidebar","urlFilter"],"mappings":"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","file":"static/js/51.efe27765.chunk.js","sourcesContent":["// ** React Imports\nimport { Link } from 'react-router-dom'\nimport { useEffect } from 'react'\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Blank Avatar Image\n// import blankAvatar from '@src/assets/images/avatars/avatar-blank.png'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { ReactSortable } from 'react-sortablejs'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { Menu, Search, MoreVertical } from 'react-feather'\nimport { getTasks } from './store'\n\n// ** Reactstrap Imports\nimport {\n  Input,\n  Badge,\n  InputGroup,\n  DropdownMenu,\n  DropdownItem,\n  InputGroupText,\n  DropdownToggle,\n  UncontrolledDropdown\n} from 'reactstrap'\n\nconst Tasks = props => {\n  // ** Props\n  const {\n    query,\n    tasks,\n    params,\n    setSort,\n    dispatch,\n    setQuery,\n    updateTask,\n    selectTask,\n    reOrderTasks,\n    handleTaskSidebar,\n    handleMainSidebar\n  } = props\n\n  // ** Function to selectTask on click\n  const handleTaskClick = obj => {\n    console.log(obj)\n    dispatch(selectTask(obj))\n    handleTaskSidebar()\n  }\n\n  // ** Returns avatar color based on task tag\n  // const resolveAvatarVariant = tags => {\n  //   if (tags.includes('high')) return 'light-primary'\n  //   if (tags.includes('medium')) return 'light-warning'\n  //   if (tags.includes('low')) return 'light-success'\n  //   if (tags.includes('update')) return 'light-danger'\n  //   if (tags.includes('team')) return 'light-info'\n  //   return 'light-primary'\n  // }\n\n  // ** Renders task tags\n  const renderTags = arr => {\n    const badgeColor = {\n      team: 'light-primary',\n      low: 'light-success',\n      medium: 'light-warning',\n      high: 'light-danger',\n      update: 'light-info'\n    }\n\n    return arr.map(item => (\n      <Badge className='text-capitalize' key={item} color={badgeColor[item]} pill>\n        {item}\n      </Badge>\n    ))\n  }\n\n  // ** Renders Avatar\n  // const renderAvatar = obj => {\n  //   const item = obj.assignee\n\n  //   if (item.avatar === undefined || item.avatar === null) {\n  //     return <Avatar img={blankAvatar} imgHeight='32' imgWidth='32' />\n  //   } else if (item.avatar !== '') {\n  //     return <Avatar img={item.avatar} imgHeight='32' imgWidth='32' />\n  //   } else {\n  //     return <Avatar color={resolveAvatarVariant(obj.tags)} content={item.fullName} initials />\n  //   }\n  // }\n\n  const renderTasks = () => {\n    return (\n      <PerfectScrollbar\n        className='list-group todo-task-list-wrapper'\n        options={{ wheelPropagation: false }}\n        containerRef={ref => {\n          if (ref) {\n            ref._getBoundingClientRect = ref.getBoundingClientRect\n\n            ref.getBoundingClientRect = () => {\n              const original = ref._getBoundingClientRect()\n\n              return { ...original, height: Math.floor(original.height) }\n            }\n          }\n        }}\n      >\n        {tasks.length ? (\n          <ReactSortable\n            tag='ul'\n            list={tasks}\n            handle='.drag-icon'\n            className='todo-task-list media-list'\n            setList={newState => dispatch(reOrderTasks(newState))}\n          >\n            {tasks.map((item, index) => {\n              return (\n                <li\n                  key={`${item.id}-${index}`}\n                  onClick={() => handleTaskClick(item)}\n                  className={classnames('todo-item', {\n                    completed: item.is_completed\n                  })}\n                >\n                  <div className='todo-title-wrapper'>\n                    <div className='todo-title-area'>\n                      <MoreVertical className='drag-icon' />\n                      <div className='form-check'>\n                        <Input\n                          type='checkbox'\n                          id={item.title}\n                          checked={item.is_completed}\n                          onClick={e => e.stopPropagation()}\n                          onChange={e => {\n                            e.stopPropagation()\n                            dispatch(updateTask({ ...item, is_completed: e.target.checked }))\n                          }}\n                        />\n                      </div>\n                      <span className='todo-title'>{item.title}</span>\n                    </div>\n                    {/* <div className='todo-item-action mt-lg-0 mt-50'>\n                      {item.tags && item.tags.length ? (\n                        <div className='badge-wrapper me-1'>{renderTags(item.tags)}</div>\n                      ) : null} */}\n                      {/* {item.dueDate ? (\n                        <small className='text-nowrap text-muted me-1'>\n                          {new Date(item.dueDate).toLocaleString('default', { month: 'short' })}{' '}\n                          {new Date(item.dueDate).getDate().toString().padStart(2, '0')}\n                        </small>\n                      ) : null} */}\n                      {/* {item.assignee ? renderAvatar(item) : null} */}\n                    {/* </div> */}\n                  </div>\n                </li>\n              )\n            })}\n          </ReactSortable>\n        ) : (\n          <div className='no-results show'>\n            <h5>No Items Found</h5>\n          </div>\n        )}\n      </PerfectScrollbar>\n    )\n  }\n\n  // ** Function to getTasks based on search query\n  const handleFilter = e => {\n    setQuery(e.target.value)\n    dispatch(getTasks({ ...params, q: e.target.value }))\n  }\n\n  // ** Function to getTasks based on sort\n  const handleSort = (e, val) => {\n    e.preventDefault()\n    setSort(val)\n    dispatch(getTasks({ ...params, sortBy: val }))\n  }\n  \n  return (\n    <div className='todo-app-list'>\n      <div className='app-fixed-search d-flex align-items-center'>\n        <div className='sidebar-toggle cursor-pointer d-block d-lg-none ms-1' onClick={handleMainSidebar}>\n          <Menu size={21} />\n        </div>\n        <div className='d-flex align-content-center justify-content-between w-100'>\n          <InputGroup className='input-group-merge'>\n            <InputGroupText>\n              <Search className='text-muted' size={14} />\n            </InputGroupText>\n            <Input placeholder='Search Notes' value={query} onChange={handleFilter} />\n          </InputGroup>\n        </div>\n        <UncontrolledDropdown>\n          <DropdownToggle className='hide-arrow me-1' tag='a' href='/' onClick={e => e.preventDefault()}>\n            <MoreVertical className='text-body' size={16} />\n          </DropdownToggle>\n          <DropdownMenu end>\n            <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, 'title-asc')}>\n              Sort A-Z\n            </DropdownItem>\n            <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, 'title-desc')}>\n              Sort Z-A\n            </DropdownItem>\n            {/* <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, 'assignee')}>\n              Sort Assignee\n            </DropdownItem> */}\n            {/* <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, 'due-date')}>\n              Sort Due Date\n            </DropdownItem> */}\n            <DropdownItem tag={Link} to='/' onClick={e => handleSort(e, '')}>\n              Reset Sort\n            </DropdownItem>\n          </DropdownMenu>\n        </UncontrolledDropdown>\n      </div>\n      {renderTasks()}\n    </div>\n  )\n}\n\nexport default Tasks\n","import { useEffect, useState } from 'react'\nimport { Link, useParams } from 'react-router-dom'\nimport { selectThemeColors } from '@utils'\nimport Select from 'react-select'\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { Mail, Star, Check, Trash, Plus } from 'react-feather'\nimport { getTasks } from './store'\n\n// ** Reactstrap Imports\nimport { Button, ListGroup, ListGroupItem, Label } from 'reactstrap'\n\nconst TodoSidebar = props => {\n\n  const { projects, handleTaskSidebar, setMainSidebar, mainSidebar, dispatch, params } = props\n  const [selectedProject, setSelectedProject] = useState()\n\n  useEffect(() => {\n    // if (projects && selectedProject && selectedProject.id) {\n      // const found = projects.filter(item => item.id === selectedProject.id)\n      // if (found && found[0]) {\n      //   setSelectedProject(found[0])\n        // console.log('selectedProject ', selectedProject)\n    //     console.log('MASHA')\n    //     dispatch(getTasks({ ...params, project_id : selectedProject && selectedProject.id ? selectedProject.id : '' }))\n    //   // }\n    // } else {\n      setSelectedProject({\n        id: 0,\n        title: \"ALL\",\n        value: 0,\n        label: \"ALL\"\n    })\n    // }\n  }, [])\n\n  const handleProjectSelection = (item) => {\n    setSelectedProject(item)\n    dispatch(getTasks({ ...params, project_id : item && item.id ? item.id : '' }))\n  }\n  \n\n  // ** Functions To Handle List Item Filter\n  const handleFilter = filter => {\n    // console.log(' Params ', params)\n    // console.log(' Filter ', filter)\n    // console.log(selectedProject)\n    dispatch(getTasks({ ...params, filter, project_id: selectedProject && selectedProject ? selectedProject.id : '' }))\n  }\n\n  const handleTag = tag => {\n    console.log('MAI V')\n    dispatch(getTasks({ ...params, tag, project_id: selectedProject && selectedProject ? selectedProject.id : '' }))\n  }\n\n  // ** Functions To Active List Item\n  const handleActiveItem = value => {\n    if ((params.filter && params.filter === value) || (params.tag && params.tag === value)) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  // ** Functions To Handle Add Task Click\n  const handleAddClick = () => {\n    handleTaskSidebar()\n    setMainSidebar()\n  }\n\n  // const openProject = (item) => {\n  //   // setSelectedProject(item)\n  //   // history.push(\"/login\")\n  // }\n\n  return (\n    <div\n      className={classnames('sidebar-left', {\n        show: mainSidebar === true\n      })}\n    >\n      <div className='sidebar'>\n        <div className='sidebar-content todo-sidebar'>\n          <div className='todo-app-menu'>\n            <div className='add-task'>\n              <Button color='primary' onClick={handleAddClick} block>\n                Add Note\n              </Button>\n            </div>\n            <div className='add-task' style={{paddingTop: '0px'}}>\n              <Label className='form-label' for='projects'>\n                Select Project\n              </Label>\n              <Select\n                  id='projects'\n                  name='projects'\n                  isClearable={false}\n                  theme={selectThemeColors}\n                  options={projects}\n                  value={selectedProject}\n                  onChange={(item) => {\n                    handleProjectSelection(item)\n                  }}\n                  style={{width: '84% !important', margin: 'auto'}}\n                  className='react-select'\n                  classNamePrefix='select'\n              />\n            </div>\n            {selectedProject && selectedProject.id ? (<PerfectScrollbar className='sidebar-menu-list' options={{ wheelPropagation: false }}>\n              <ListGroup tag='div' className='list-group-filters'>\n                <ListGroupItem\n                  // action\n                  // tag={Link}\n                  // to={`/app/apps/todo/${selectedProject?.id}`}\n                  active={params.filter === '' && params.tag === ''}\n                  onClick={() => handleFilter('')}\n                >\n                  <Mail className='me-75' size={18} />\n                  <span className='align-middle'>All</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  // tag={Link}\n                  // to={`/app/apps/todo/important/${selectedProject?.id}`}\n                  active={handleActiveItem('important')}\n                  onClick={() => handleFilter('important')}\n                  // action\n                >\n                  <Star className='me-75' size={18} />\n                  <span className='align-middle'>Important</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  // tag={Link}\n                  // to={`/app/apps/todo/completed/${selectedProject?.id}`}\n                  active={handleActiveItem('completed')}\n                  onClick={() => handleFilter('completed')}\n                  // action\n                >\n                  <Check className='me-75' size={18} />\n                  <span className='align-middle'>Completed</span>\n                </ListGroupItem>\n                <ListGroupItem\n                  // tag={Link}\n                  // to={`/app/apps/todo/deleted/${selectedProject?.id}`}\n                  active={handleActiveItem('deleted')}\n                  onClick={() => handleFilter('deleted')}\n                  // action\n                >\n                  <Trash className='me-75' size={18} />\n                  <span className='align-middle'>Deleted</span>\n                </ListGroupItem>\n              </ListGroup>\n              {/* <div className='mt-3 px-2 d-flex justify-content-between'>\n                <h6 className='section-label mb-1'>Tags</h6> */}\n                {/* <Plus className='cursor-pointer' size={14} /> */}\n              {/* </div> */}\n            </PerfectScrollbar>) : null}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TodoSidebar\n","// ** React Imports\nimport { useEffect, useState, Fragment } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport Flatpickr from 'react-flatpickr'\nimport { Editor } from 'react-draft-wysiwyg'\nimport { X, Star, Trash } from 'react-feather'\nimport Select, { components } from 'react-select' //eslint-disable-line\nimport { useForm, Controller } from 'react-hook-form'\nimport { EditorState, ContentState } from 'draft-js'\n\n// ** Reactstrap Imports\nimport { Modal, ModalBody, Button, Form, Input, Label, FormFeedback } from 'reactstrap'\n\n// ** Utils\nimport { isObjEmpty, selectThemeColors } from '@utils'\n\n// ** Assignee Avatars\n// import img1 from '@src/assets/images/portrait/small/avatar-s-3.jpg'\n// import img2 from '@src/assets/images/portrait/small/avatar-s-1.jpg'\n// import img3 from '@src/assets/images/portrait/small/avatar-s-4.jpg'\n// import img4 from '@src/assets/images/portrait/small/avatar-s-6.jpg'\n// import img5 from '@src/assets/images/portrait/small/avatar-s-2.jpg'\n// import img6 from '@src/assets/images/portrait/small/avatar-s-11.jpg'\n\n// ** Styles Imports\nimport '@styles/react/libs/editor/editor.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/react/libs/react-select/_react-select.scss'\n\n// ** Function to capitalize the first letter of string\nconst capitalize = string => string.charAt(0).toUpperCase() + string.slice(1)\n\n// ** Modal Header\nconst ModalHeader = props => {\n  // ** Props\n  const { children, store, handleTaskSidebar, setDeleted, deleted, important, setImportant, deleteTask, dispatch } =\n    props\n\n  // ** Function to delete task\n  const handleDeleteTask = () => {\n    setDeleted(!deleted)\n    dispatch(deleteTask(store.selectedTask.id))\n    handleTaskSidebar()\n  }\n\n  return (\n    <div className='modal-header d-flex align-items-center justify-content-between mb-1'>\n      <h5 className='modal-title'>{children}</h5>\n      <div className='todo-item-action d-flex align-items-center'>\n        {store && !isObjEmpty(store.selectedTask) ? (\n          <Trash className='cursor-pointer mt-25' size={16} onClick={() => handleDeleteTask()} />\n        ) : null}\n        <span className='todo-item-favorite cursor-pointer mx-75'>\n          <Star\n            size={16}\n            onClick={() => setImportant(!important)}\n            className={classnames({\n              'text-warning': important === true\n            })}\n          />\n        </span>\n        <X className='fw-normal mt-25' size={16} onClick={handleTaskSidebar} />\n      </div>\n    </div>\n  )\n}\n\nconst TaskSidebar = props => {\n  // ** Props\n  const { projects, open, handleTaskSidebar, store, dispatch, updateTask, selectTask, addTask, deleteTask } = props\n\n  // ** States\n  // const [assignee, setAssignee] = useState({ value: 'pheobe', label: 'Pheobe Buffay', img: img1 })\n  const [tags, setTags] = useState([])\n  const [project, setProject] = useState({})\n  const [desc, setDesc] = useState(EditorState.createEmpty())\n  const [completed, setCompleted] = useState(false)\n  const [important, setImportant] = useState(false)\n  const [deleted, setDeleted] = useState(false)\n  const [dueDate, setDueDate] = useState(new Date())\n\n  const {\n    control,\n    setError,\n    setValue,\n    clearErrors,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({\n    defaultValues: { title: '' }\n  })\n\n  useEffect(() => {\n    if (store && store.selectedTask && store.selectedTask.project_id) {\n      console.log('TASKSidebar Store CALLED', store)\n      setProject(projects.filter(item => item.id === store.selectedTask.project_id))\n    }\n  }, [projects, store])\n  \n  \n  // const projectsData = projects.map((item) => {\n  //   return { ...item, value: item.id, label: item.title }\n  // })\n\n  // ** Tag Select Options\n  const tagOptions = [\n    { value: 'team', label: 'Team' },\n    { value: 'low', label: 'Low' },\n    { value: 'medium', label: 'Medium' },\n    { value: 'high', label: 'High' },\n    { value: 'update', label: 'Update' }\n  ]\n\n  // ** Custom Assignee Component\n  const AssigneeComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <div className='d-flex align-items-center'>\n          <img className='d-block rounded-circle me-50' src={data.img} height='26' width='26' alt={data.label} />\n          <p className='mb-0'>{data.label}</p>\n        </div>\n      </components.Option>\n    )\n  }\n\n  // ** Returns sidebar title\n  const handleSidebarTitle = () => {\n    if (store && !isObjEmpty(store.selectedTask)) {\n      return (\n        <Button\n          outline\n          size='sm'\n          onClick={() => setCompleted(!completed)}\n          color={completed === true ? 'success' : 'secondary'}\n        >\n          {completed === true ? 'Completed' : 'Mark Complete'}\n        </Button>\n      )\n    } else {\n      return 'Add Note'\n    }\n  }\n\n  // ** Function to run when sidebar opens\n  const handleSidebarOpened = () => {\n    const { selectedTask } = store\n    console.error('selected ', selectTask.is_deleted)\n    if (!isObjEmpty(selectedTask)) {\n      setValue('title', selectedTask.title)\n      setCompleted(selectedTask.is_completed)\n      setImportant(selectedTask.is_important)\n      setDeleted(selectedTask.is_deleted)\n      // setAssignee([\n      //   {\n      //     value: selectedTask.assignee.fullName,\n      //     label: selectedTask.assignee.fullName,\n      //     img: selectedTask.assignee.avatar\n      //   }\n      // ])\n      // setDueDate(selectedTask.dueDate)\n      if (typeof selectedTask.note === 'string') {\n        setDesc(EditorState.createWithContent(ContentState.createFromText(selectedTask.note)))\n      } else {\n        const obj = selectedTask.note._immutable.currentContent.blockMap\n        const property = Object.keys(obj).map(val => val)\n\n        setDesc(EditorState.createWithContent(ContentState.createFromText(obj[property].text)))\n      }\n\n      // if (selectedTask?.tags?.length) {\n      //   const tags = []\n      //   selectedTask.tags.map(tag => {\n      //     tags.push({ value: tag, label: capitalize(tag) })\n      //   })\n      //   setTags(tags)\n      // }\n    }\n  }\n\n  // ** Function to run when sidebar closes\n  const handleSidebarClosed = () => {\n    setTags([])\n    setDesc('')\n    setValue('title', '')\n    // setAssignee({ value: 'pheobe', label: 'Pheobe Buffay', img: img1 })\n    setCompleted(false)\n    setImportant(false)\n    setDeleted(false)\n    setDueDate(new Date())\n    dispatch(selectTask({}))\n    clearErrors()\n  }\n\n  // ** Function to reset fields\n  const handleResetFields = () => {\n    const descValue = EditorState.createWithContent(ContentState.createFromText(store.selectedTask.note))\n\n    setValue('title', store.selectedTask.title)\n    setDesc(descValue)\n    setCompleted(store.selectedTask.is_completed)\n    setImportant(store.selectedTask.is_important)\n    setDeleted(store.selectedTask.is_deleted)\n    // setDueDate(store.selectedTask.dueDate)\n    // if (store.selectedTask.assignee.fullName !== assignee.label) {\n      // setAssignee({\n      //   value: store.selectedTask.assignee.fullName,\n      //   label: store.selectedTask.assignee.fullName,\n      //   img: store.selectedTask.assignee.avatar\n      // })\n    // }\n    if (store.selectedTask.tags.length) {\n      const tags = []\n      store.selectedTask.tags.map(tag => {\n        tags.push({ value: tag, label: capitalize(tag) })\n      })\n      setTags(tags)\n    }\n  }\n\n  // ** Renders Footer Buttons\n  const renderFooterButtons = () => {\n    if (store && !isObjEmpty(store.selectedTask)) {\n      return (\n        <Fragment>\n          <Button color='primary' className='update-btn update-todo-item me-1'>\n            Update\n          </Button>\n          <Button color='secondary' onClick={handleResetFields} outline>\n            Reset\n          </Button>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          <Button color='primary' className='add-todo-item me-1'>\n            Add\n          </Button>\n          <Button color='secondary' onClick={handleTaskSidebar} outline>\n            Cancel\n          </Button>\n        </Fragment>\n      )\n    }\n  }\n\n  const onSubmit = data => {\n    const newTaskTag = []\n\n    // const doesInclude = !isObjEmpty(store.selectedTask) && assignee.label === store.selectedTask.assignee.fullName\n\n    if (tags.length) {\n      tags.map(tag => newTaskTag.push(tag.value))\n    }\n\n    const obj = desc._immutable.currentContent.blockMap\n    // const property = Object.keys(obj).map(val => val)\n    // const newAssignee = {\n    //   fullName: assignee.label,\n    //   avatar: assignee.img\n    // }\n    const state = {\n      // dueDate,\n      title: data.title,\n      tags: newTaskTag,\n      note: obj?._list?._tail?.array[0][1]?.text || '',\n      is_completed: completed,\n      is_deleted: deleted,\n      is_important: important,\n      project_id: project && project?.id ? project?.id : 0\n    }\n    \n    if (data.title.length) {\n      if (isObjEmpty(errors)) {\n        if (isObjEmpty(store.selectedTask) || (!isObjEmpty(store.selectedTask) && !store.selectedTask.title.length)) {\n          dispatch(addTask(state))\n        } else {\n          dispatch(updateTask({ ...state, id: store.selectedTask.id }))\n        }\n        handleTaskSidebar()\n      }\n    } else {\n      setError('title', {\n        type: 'manual'\n      })\n    }\n  }\n  return (\n    <Modal\n      isOpen={open}\n      toggle={handleTaskSidebar}\n      className='sidebar-lg'\n      contentClassName='p-0'\n      onOpened={handleSidebarOpened}\n      onClosed={handleSidebarClosed}\n      modalClassName='modal-slide-in sidebar-todo-modal'\n    >\n      <Form id='form-modal-todo' className='todo-modal' onSubmit={handleSubmit(onSubmit)}>\n        <ModalHeader\n          store={store}\n          deleted={deleted}\n          dispatch={dispatch}\n          important={important}\n          deleteTask={deleteTask}\n          setDeleted={setDeleted}\n          setImportant={setImportant}\n          handleTaskSidebar={handleTaskSidebar}\n        >\n          {handleSidebarTitle()}\n        </ModalHeader>\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n          <div className='mb-1'>\n              <Label className='form-label' for='task-project'>\n                Projects\n              </Label>\n              <Select\n                id='task-project'\n                className='react-select'\n                classNamePrefix='select'\n                isClearable={false}\n                options={projects}\n                theme={selectThemeColors}\n                value={project}\n                isDisabled={store?.selectedTask?.id}\n                onChange={data => {\n                  setProject(data)\n                }}\n              />\n            </div>\n          <div className='mb-1'>\n            <Label className='form-label' for='task-title'>\n              Title <span className='text-danger'>*</span>\n            </Label>\n            <Controller\n              name='title'\n              control={control}\n              render={({ field }) => (\n                <Input\n                  id='task-title'\n                  placeholder='Title'\n                  className='new-todo-item-title'\n                  invalid={errors.title && true}\n                  {...field}\n                />\n              )}\n            />\n            {errors.title && <FormFeedback>Please enter a valid task title</FormFeedback>}\n          </div>\n          {/* <div className='mb-1'>\n            <Label className='form-label' for='task-assignee'>\n              Assignee\n            </Label>\n            <Select\n              id='task-assignee'\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              options={assigneeOptions}\n              theme={selectThemeColors}\n              value={assignee}\n              onChange={data => setAssignee(data)}\n              components={{ Option: AssigneeComponent }}\n            />\n          </div>\n          <div className='mb-1'>\n            <Label className='form-label' for='due-date'>\n              Due Date\n            </Label>\n            <Flatpickr\n              id='due-date'\n              name='due-date'\n              className='form-control'\n              onChange={date => setDueDate(date[0])}\n              value={dueDate}\n              options={{ dateFormat: 'Y-m-d' }}\n            />\n          </div> */}\n          {/* <div className='mb-1'>\n            <Label className='form-label' for='task-tags'>\n              Tags\n            </Label>\n            <Select\n              isMulti\n              id='task-tags'\n              className='react-select'\n              classNamePrefix='select'\n              isClearable={false}\n              options={tagOptions}\n              theme={selectThemeColors}\n              value={tags}\n              onChange={data => {\n                setTags(data !== null ? [...data] : [])\n              }}\n            />\n          </div> */}\n          <div className='mb-1'>\n            <Label for='task-desc' className='form-label'>\n              Note \n            </Label>\n            <Editor\n              editorState={desc}\n              wrapperClassName='toolbar-bottom'\n              toolbar={{\n                options: ['inline', 'textAlign'],\n                inline: {\n                  inDropdown: false,\n                  options: ['bold', 'italic', 'underline']\n                }\n              }}\n              onEditorStateChange={data => {\n                setDesc(data)\n              }}\n            />\n          </div>\n          <div>{renderFooterButtons()}</div>\n        </ModalBody>\n      </Form>\n    </Modal>\n  )\n}\n\nexport default TaskSidebar\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\n\n// ** Third Party Components\nimport classnames from 'classnames'\n\n// ** Todo App Components\nimport Tasks from './Tasks'\nimport Sidebar from './Sidebar'\nimport TaskSidebar from './TaskSidebar'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getTasks, updateTask, selectTask, addTask, deleteTask, reOrderTasks } from './store'\n\n// ** Styles\nimport '@styles/react/apps/app-todo.scss'\n\nimport { getAllProjects } from \"../../../services/Apis\"\n\nconst TODO = () => {\n\n  const [projectsData, setProjectsData] = useState([])\n\n  const fetchProjects = () => {\n    const params = {\n      direction: 'desc',\n      sort: 'id',\n      // limit: 100,\n      active: 1\n    }\n    try {\n      getAllProjects(params).then((res) => {\n        const result = res?.response\n        if (\n          result &&\n          (result.code === 200 || result.code === 400) &&\n          result.data\n        ) {\n          const pData = result.data.map((item) => {\n            return { ...item, value: item.id, label: item.title }\n          })\n          pData.unshift({\n            id: 0,\n            title: \"ALL\",\n            value: 0,\n            label: \"ALL\"\n        })\n          console.log(pData)\n          setProjectsData(pData)\n        }\n      })\n    } catch (error) {\n      console.error('ERROR')\n    }\n  }\n\n  // ** States\n  const [sort, setSort] = useState('')\n  const [query, setQuery] = useState('')\n  const [mainSidebar, setMainSidebar] = useState(false)\n  const [openTaskSidebar, setOpenTaskSidebar] = useState(false)\n\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.todo)\n\n  // console.info(' INDEX ', store.params)\n\n  // ** URL Params\n  const paramsURL = useParams()\n  const params = {\n    filter: paramsURL.filter || '',\n    q: query || '',\n    sortBy: sort || '',\n    tag: paramsURL.tag || ''\n  }\n  params['project_id'] = store.params && store.params.project_id ? store.params.project_id : ''\n\n  // ** Function to handle Left sidebar & Task sidebar\n  const handleMainSidebar = () => setMainSidebar(!mainSidebar)\n  const handleTaskSidebar = () => setOpenTaskSidebar(!openTaskSidebar)\n\n  // ** Get Tasks on mount & based on dependency change\n  // useEffect(() => {\n  //   if (store.params && store.params.project_id) {\n  //     dispatch(\n  //       getTasks({\n  //         filter: paramsURL.filter || '',\n  //         q: query || '',\n  //         sortBy: sort || '',\n  //         project_id: store.params.project_id,\n  //         tag: paramsURL.tag || ''\n  //       })\n  //     )\n  //   }\n  // }, [store.tasks.length, paramsURL.filter, paramsURL.tag, paramsURL.project, query, sort])\n\n  useEffect(() => { \n    fetchProjects()\n  }, [])\n\n  useEffect(() => {\n      dispatch(\n        getTasks({\n          filter: paramsURL.filter || '',\n          q: query || '',\n          sortBy: sort || '',\n          tag: paramsURL.tag || '',\n          project_id: store.params.project_id || ''\n        })\n      )\n  }, [])\n\n  return (\n    <Fragment>\n      <Sidebar\n        projects={projectsData}\n        store={store}\n        params={params}\n        dispatch={dispatch}\n        mainSidebar={mainSidebar}\n        urlFilter={paramsURL.filter}\n        setMainSidebar={setMainSidebar}\n        handleTaskSidebar={handleTaskSidebar}\n      />\n      <div className='content-right'>\n        <div className='content-wrapper'>\n          <div className='content-body'>\n            <div\n              className={classnames('body-content-overlay', {\n                show: mainSidebar === true\n              })}\n              onClick={handleMainSidebar}\n            ></div>\n\n            {store ? (\n              <Tasks\n                store={store}\n                tasks={store.tasks}\n                sort={sort}\n                query={query}\n                params={params}\n                setSort={setSort}\n                setQuery={setQuery}\n                dispatch={dispatch}\n                // getTasks={getTasks}\n                paramsURL={paramsURL}\n                updateTask={updateTask}\n                selectTask={selectTask}\n                reOrderTasks={reOrderTasks}\n                handleMainSidebar={handleMainSidebar}\n                handleTaskSidebar={handleTaskSidebar}\n              />\n            ) : null}\n\n            <TaskSidebar\n              projects={projectsData.filter(item => item.id !== 0)}\n              store={store}\n              params={params}\n              addTask={addTask}\n              dispatch={dispatch}\n              open={openTaskSidebar}\n              updateTask={updateTask}\n              selectTask={selectTask}\n              deleteTask={deleteTask}\n              handleTaskSidebar={handleTaskSidebar}\n            />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default TODO\n"],"sourceRoot":""}