{"version":3,"sources":["views/apps/kanban/KanbanTasks.js","views/apps/kanban/KanbanBoards.js","views/apps/kanban/index.js","@core/components/avatar-group/index.js"],"names":["KanbanTasks","props","task","renderLabels","className","label","priority","title","color","taskPriorityMeta","value","pill","onClick","boardId","id","task_comments","assigned_to","style","marginLeft","size","length","KanbanBoard","onBoardUpdate","project","boardsData","board","index","tasks","useState","setTitle","useEffect","list","group","setList","onAdd","ev","newBoardId","to","classList","replace","postData","project_id","item","dataset","taskId","find","b","realId","addTask","then","res","response","code","i","Number","toast","success","error","catch","err","console","log","backgroundColor","padding","borderRadius","map","boards","setBoards","setTasks","projects","setProjects","currentProject","setCurrentProject","getTasks","data","params","getAllProjectTasks","result","taskData","status","updateTasks","updateTaskItem","old","taskItem","getAllProjects","direction","sort","active","pData","getAllTaskStatus","boardData","md","xxl","for","theme","selectThemeColors","isClearable","classNamePrefix","options","onChange","isLastBoard","KanbanBoards","AvatarGroup","tag","Tag","classnames","ItemTag","placement","target","split","join","meta","undefined"],"mappings":"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","file":"static/js/75.ed4d0db1.chunk.js","sourcesContent":["import { Badge, Card, CardBody } from 'reactstrap'\nimport AvatarGroup from '@components/avatar-group'\n\nimport { Paperclip, MessageSquare } from 'react-feather'\nimport { taskPriorityMeta } from '@utils'\n\nconst KanbanTasks = props => {\n  // ** Props\n  const { task } = props\n  const handleTaskClick = () => {\n    // dispatch(handleSelectTask(task))\n    // handleTaskSidebarToggle()\n  }\n\n  const renderLabels = () => {\n    return (\n      // <div className='mb-1'>\n        <Badge className='text-capitalize mr-1' label={task.priority?.title} color={taskPriorityMeta[task.priority?.value]} pill>\n            {task.priority?.title}\n          </Badge>\n      // </div>\n    )\n  }\n\n  const renderAttachmentsComments = () => {\n    if ((task.task_comments)) {\n      return (\n        <div className='d-flex align-items-center' style={{marginLeft: '10px'}}>\n          {/* {task.attachments && task.attachments.length ? (\n            <div className='d-flex align-items-center cursor-pointer me-75'>\n              <Paperclip size={16} className='me-25' />\n              <span>{task.attachments.length}</span>\n            </div>\n          ) : null} */}\n          {/* {task.task_comments && task.task_comments.length ? ( */}\n            <div className='d-flex align-items-center cursor-pointer'>\n              <MessageSquare size={16} className='me-50' />\n              <span>{task.task_comments.length}</span>\n            </div>\n          {/* ) : null} */}\n        </div>\n      )\n    } else {\n      return null\n    }\n}\n  const taskFooterClasses = () => {\n    // if (task.task_comments) {\n    //   return 'justify-content-end'\n    // } else {\n      return 'justify-content-start'\n    // }\n  }\n\n  const renderTaskFooter = () => {\n    return (task.task_comments) ||\n      (task.assigned_to) ? (\n      <div className={`task-footer d-flex align-items-center mt-1 ${taskFooterClasses()}`}>\n        {renderLabels()}\n        {renderAttachmentsComments()}\n        {/* {task.assigned_to ? (\n          <div className='justify-content-end'><AvatarGroup data={[task.assigned_to]} /></div>\n        ) : null} */}\n      </div>\n    ) : null\n  }\n\n  return (\n    <Card onClick={handleTaskClick} className='task' data-board-id={task.boardId} data-task-id={task.id}>\n      <CardBody data-task-id={task.id}>\n        <span className='task-title'>{task.title} </span>\n        {renderTaskFooter()}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default KanbanTasks\n","// ** React Imports\nimport { useState, useEffect, Fragment } from 'react'\nimport toast from 'react-hot-toast'\nimport { Input, Button, FormText, DropdownMenu, DropdownItem, DropdownToggle, UncontrolledDropdown } from 'reactstrap'\n\n// ** Third Party Imports\nimport { ReactSortable } from 'react-sortablejs'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Plus, MoreVertical } from 'react-feather'\n\nimport KanbanTasks from './KanbanTasks'\nimport { addTask } from \"../../../services/Apis\"\n\nconst defaultValues = {\n  taskTitle: ''\n}\n\nconst KanbanBoard = props => {\n\n  const { onBoardUpdate, project, boardsData, board, index, tasks } = props\n  const [title, setTitle] = useState('')\n\n  useEffect(() => {\n    setTitle(board.title)\n  }, [board.title])\n\n  // const sortTaskOnSameBoard = ev => {\n  //   if (ev.from.classList[1] === ev.to.classList[1]) {\n  //     dispatch(\n  //       reorderTasks({\n  //         taskId: ev.item.dataset.taskId,\n  //         targetTaskId: ev.originalEvent.target.dataset.taskId\n  //       })\n  //     )\n  //   }\n  // }\n\n  const MoveTaskToAnotherBoard = ev => {\n    const newBoardId = ev.to.classList[1].replace('board-', '')\n    const postData = { project_id: project.id, id: ev.item.dataset.taskId }\n    postData['status_id'] = boardsData.find(b => b.value === newBoardId).realId\n    addTask(postData)\n    .then(res => {\n      if (res.response.code === 200) {\n        const task = tasks.find(i => i.id === Number(postData.id))\n        task.boardId = newBoardId\n        onBoardUpdate(task)\n        toast.success('Task successfully updated!')\n      } else {\n        toast.error(\"Error Updating Task\")\n      }\n    })\n    .catch(err => {\n      console.log('ERROR: ', err)\n      toast.error(\"ERROR: \", err)\n    })\n  }\n\n  return (\n    <Fragment key={index}>\n      <div className='board-wrapper'>\n        <div className='d-flex align-items-center justify-content-between'>\n          <div className='d-flex align-items-center board-header'>\n            <Input className='board-title' value={title} />\n          </div>\n        </div>\n        <div>\n          <ReactSortable\n            list={tasks}\n            group='shared-group'\n            setList={() => null}\n            // onChange={sortTaskOnSameBoard}\n            onAdd={MoveTaskToAnotherBoard}\n            className={`tasks-wrapper board-${board.id}`}\n            style={{backgroundColor: '#ededed', padding: '1px 10px', borderRadius: '10px'}}\n          >\n            {tasks.map((task, index) => {\n              if (task.boardId === board.id) {\n                return (\n                  <KanbanTasks\n                    task={task}\n                    index={index}\n                    // labelColors={labelColors}\n                    key={`${task.boardId}-${index}`}\n                  />\n                )\n              } else {\n                return <Fragment key={`${task.boardId}-${index}`}></Fragment>\n              }\n            })}\n          </ReactSortable>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default KanbanBoard\n","import { useEffect, useState } from 'react'\nimport Select from 'react-select'\nimport { selectThemeColors } from '@utils'\nimport KanbanBoards from './KanbanBoards'\nimport '@styles/react/apps/app-kanban.scss'\nimport { Row, Col, Card, Label, CardBody, CardTitle, CardHeader } from 'reactstrap'\nimport { getAllTaskStatus, getAllProjectTasks, getAllProjects } from \"../../../services/Apis\"\n\nconst KanbanBoard = () => {\n  \n  const [boards, setBoards] = useState([])\n  const [tasks, setTasks] = useState([])\n  const [projects, setProjects] = useState([])\n  const [currentProject, setCurrentProject] = useState({})\n  \n  const getBoards = () => {\n      getAllTaskStatus().then((res) => {\n        const result = res.response\n        if (\n          result &&\n          (result.code === 200 || result.code === 400) &&\n          result.data\n        ) {\n          const boardData = result.data.map((item) => {\n            return { ...item, id: item.value, realId: item.id }\n          })\n          setBoards(boardData)\n        }\n      })\n  }\n\n  const getTasks = (data) => {\n    const params = {\n      project_id: data?.id\n    }\n    getAllProjectTasks(params).then((res) => {\n      const result = res.response\n      if (\n        result &&\n        (result.code === 200 || result.code === 400) &&\n        result.data\n      ) {\n        const taskData = result.data.map((item) => {\n          return { ...item, boardId: item.status.value || '' }\n        })\n        setTasks(taskData)\n      }\n    })\n  }\n\n  const fetchProjects = () => {\n    const params = {\n      direction: 'desc',\n      sort: 'id',\n      active: 1\n    }\n    getAllProjects(params).then((res) => {\n      const result = res.response\n      if (\n        result &&\n        (result.code === 200 || result.code === 400) &&\n        result.data\n      ) {\n        const pData = result.data.map((item) => {\n            return { ...item, value: item.id, label: item.title }\n          })\n        setProjects(pData)\n        setCurrentProject(pData[0])\n        getTasks(pData[0])\n      }\n    })\n  }\n\n  const updateTasks = (updateTaskItem) => {\n    setTasks((old) => {\n      return old.map((taskItem) => {\n        if (taskItem.id === updateTaskItem.id) {\n          taskItem.boardId = updateTaskItem.boardId\n        }\n        return taskItem\n      })\n    })\n  }\n\n  useEffect(() => {\n    fetchProjects()\n    getBoards()\n}, [])\n\n  // ** Hooks\n  const renderBoards = () => {\n    return boards.map((board, index) => {\n      const isLastBoard = boards[boards.length - 1].id === board.id\n\n      return (\n        <KanbanBoards\n          project={currentProject}\n          boardsData={boards}\n          board={board}\n          onBoardUpdate={updateTasks}\n          tasks={tasks}\n          // labelColors={labelColors}\n          isLastBoard={isLastBoard}\n          key={`${board.id}-${index}`}\n          index={`${board.id}-${index}`}\n        />\n      )\n    })\n  }\n\n  return boards.length ? (\n    <>\n      <Card>\n        <CardBody>\n          <Row>\n            <Col md='3' xxl='3'>\n              <Label for='status-select'>Select Project</Label>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={projects}\n                value={currentProject}\n                onChange={data => {\n                    setCurrentProject(data)\n                    getTasks(data)\n                }}\n              />\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n\n       {/* <Card className='p-1'> */}\n       {tasks && tasks.length ? <div className='app-kanban-wrapper'>\n        {renderBoards()}\n        </div> : 'No Tasks found.' }\n       {/* </Card> */}\n    </>\n  ) : null\n}\n\nexport default KanbanBoard\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { UncontrolledTooltip } from 'reactstrap'\n\n// ** Custom Components Imports\nimport Avatar from '@components/avatar'\n\nconst AvatarGroup = props => {\n  // ** Props\n  const { data, tag, className } = props\n\n  // ** Conditional Tag\n  const Tag = tag ? tag : 'div'\n\n  // ** Render Data\n  const renderData = () => {\n    return data.map((item, i) => {\n      const ItemTag = item.tag ? item.tag : 'div'\n      return (\n        <Fragment key={i}>\n          {item.title ? (\n            <UncontrolledTooltip placement={item.placement} target={item.title.split(' ').join('-')}>\n              {item.title}\n            </UncontrolledTooltip>\n          ) : null}\n          {!item.meta ? (\n            <Avatar\n              tag={ItemTag}\n              className={classnames('pull-up', {\n                [item.className]: item.className\n              })}\n              {...(item.title ? { id: item.title.split(' ').join('-') } : {})}\n              {...item}\n              title={undefined}\n              meta={undefined}\n            />\n          ) : null}\n          {item.meta ? <ItemTag className='d-flex align-items-center ps-1'>{item.meta}</ItemTag> : null}\n        </Fragment>\n      )\n    })\n  }\n\n  return (\n    <Tag\n      className={classnames('avatar-group', {\n        [className]: className\n      })}\n    >\n      {renderData()}\n    </Tag>\n  )\n}\n\nexport default AvatarGroup\n\n// ** PropTypes\nAvatarGroup.propTypes = {\n  data: Proptypes.array.isRequired,\n  tag: Proptypes.oneOfType([Proptypes.func, Proptypes.string])\n}\n"],"sourceRoot":""}