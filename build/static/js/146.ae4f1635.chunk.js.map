{"version":3,"sources":["views/apps/gantt/index.js"],"names":["GanttComponent","viewArray","label","ViewMode","Day","value","Week","Month","Year","useState","currentView","setCurrentView","view","setView","isChecked","tasks","setTasks","projects","setProjects","currentProject","setCurrentProject","columnWidth","fetchProjectTasks","obj","params","direction","sort","project_id","id","getAllProjectTasks","then","res","result","response","code","data","map","item","index","start","Date","start_date","end","end_date","name","title","progress","type","project","displayOrder","parseInt","unshift","hideChildren","console","log","useEffect","getAllProjects","active","pData","tag","md","xxl","for","theme","selectThemeColors","isClearable","className","classNamePrefix","options","onChange","length","viewMode","listCellWidth","onExpanderClick","task","t"],"mappings":"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","file":"static/js/146.ae4f1635.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport { Row, Col, Card, Label, CardBody, CardTitle, CardHeader } from 'reactstrap'\nimport Select from 'react-select'\nimport { selectThemeColors } from '@utils'\nimport { Gantt, Task, EventOption, StylingOption, ViewMode, DisplayOption } from 'gantt-task-react'\nimport \"gantt-task-react/dist/index.css\"\n\nimport { getAllProjects, getAllProjectTasks } from \"../../../services/Apis\"\n\nconst GanttComponent = () => {\n\n    const viewArray = [\n        {label: ViewMode.Day, value: ViewMode.Day},\n        {label: ViewMode.Week, value: ViewMode.Week},\n        {label: ViewMode.Month, value: ViewMode.Month},\n        {label: ViewMode.Year, value: ViewMode.Year}\n    ]\n    const [currentView, setCurrentView] = useState({label: ViewMode.Day, value: ViewMode.Day})\n    const [view, setView] = useState(ViewMode.Day)\n    \n    const [isChecked, setIsChecked] = useState(true)\n    \n    const [tasks, setTasks] = useState([])\n    const [projects, setProjects] = useState([])\n    const [currentProject, setCurrentProject] = useState({})\n\n    let columnWidth = 65\n    if (view === ViewMode.Year) {\n        columnWidth = 350\n    } else if (view === ViewMode.Month) {\n        columnWidth = 300\n    } else if (view === ViewMode.Week) {\n        columnWidth = 250\n    }\n    \n    const handleExpanderClick = (task) => {\n    setTasks(tasks.map(t => (t.id === task.id ? task : t)))\n    console.log(`On expander click Id:${  task.id}`)\n    }\n\n    const fetchProjectTasks = (obj) => {\n        const params = {\n          direction: 'desc',\n          sort: 'id',\n          project_id: obj.id\n        }\n        getAllProjectTasks(params).then((res) => {\n          const result = res.response\n          if (\n            result &&\n            (result.code === 200 || result.code === 400) &&\n            result.data\n          ) {\n            const data = result.data.map((item, index) => {\n                return { \n                    ...item, \n                    start: new Date(item.start_date), \n                    end: new Date(item.end_date),\n                    name: item.title,\n                    id: `${item.title  } ${  item.id}`,\n                    progress: 25,\n                    type: 'task',\n                    project: `Project-${  obj.title  }-${  obj.id}`,\n                    displayOrder: parseInt(index + 2)\n                }\n            })\n            \n            data.unshift({\n                start: new Date(obj.start_date),\n                end: new Date(obj.end_date),\n                name: obj.title,\n                id: `Project-${  obj.title  }-${  obj.id}`,\n                progress: 60,\n                type: \"project\",\n                hideChildren: false,\n                displayOrder: 1\n             })\n            \n            console.log(data)\n            setTasks(data)\n          }\n        })\n    }\n    \n    const fetchProjects = () => {\n        const params = {\n          direction: 'desc',\n          sort: 'id',\n          active: 1\n        }\n        getAllProjects(params).then((res) => {\n          const result = res.response\n          if (\n            result &&\n            (result.code === 200 || result.code === 400) &&\n            result.data\n          ) {\n            const pData = result.data.map((item) => {\n                return { ...item, value: item.id, label: item.title }\n              })\n            setProjects(pData)\n            setCurrentProject(pData[0])\n            fetchProjectTasks(pData[0])\n          }\n        })\n    }\n\n    useEffect(() => {\n        fetchProjects()\n    }, [])\n    \n    return (\n        <>\n      <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Gantt</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col md='2' xxl='2'>\n              <Label for='status-select'>Select Project</Label>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={projects}\n                value={currentProject}\n                onChange={data => {\n                    setCurrentProject(data)\n                    fetchProjectTasks(data)\n                }}\n              />\n            </Col>\n            <Col md='2' xxl='1'>\n              <Label for='status-select'>Select View</Label>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={viewArray}\n                value={currentView}\n                onChange={data => {\n                    setCurrentView(data)\n                    setView(data.value)\n                }}\n              />\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n\n      <Card className='overflow-hidden'>\n        <div className='react-dataTable'>\n            {tasks && tasks.length ? <Gantt \n            tasks={tasks} \n            viewMode={view}\n            listCellWidth={isChecked ? \"155px\" : \"\"}\n            columnWidth={columnWidth}\n            onExpanderClick={handleExpanderClick}\n            /> : null}\n        </div>\n      </Card>\n    </>\n    )\n}\n\nexport default GanttComponent"],"sourceRoot":""}