{"version":3,"sources":["@core/components/card-actions/index.js","views/ui-elements/cards/actions/index.js"],"names":["CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","useState","reload","setReload","collapse","setCollapse","visibility","setVisibility","Icons","ChevronDown","remove","X","RotateCw","callAction","action","removeReload","useEffect","CollapseWrapper","includes","Collapse","Fragment","BlockUiWrapper","UiLoader","blocking","className","classnames","tag","Array","isArray","map","i","Tag","length","size","onClick","renderIcons","isOpen","data","sm","endLoading","setTimeout","responsive","bordered","md"],"mappings":"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","file":"static/js/158.0602403e.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport UiLoader from '@components/ui-loader'\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap'\n\nconst CardActions = props => {\n  // ** Props\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\n\n  // ** States\n  const [reload, setReload] = useState(false)\n  const [collapse, setCollapse] = useState(true)\n  const [visibility, setVisibility] = useState(true)\n\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }\n\n  // ** Action to call\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse)\n      case 'remove':\n        return setVisibility(false)\n      case 'reload':\n        return setReload(true)\n      default:\n    }\n  }\n\n  // ** Renders card actions\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action]\n        return (\n          <Tag\n            key={i}\n            className={classnames('cursor-pointer', {\n              'me-50': i < actions.length - 1\n            })}\n            size={15}\n            onClick={() => callAction(action)}\n          />\n        )\n      })\n    } else {\n      const Tag = Icons[actions]\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\n    }\n  }\n\n  // ** Ends reload\n  const removeReload = () => {\n    setReload(false)\n  }\n\n  // ** If user passes endReload function call it.\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload)\n    }\n  })\n\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\n\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\n\n  return (\n    <BlockUiWrapper\n      /*eslint-disable */\n      {...(actions === 'reload' || actions.includes('reload')\n        ? {\n            blocking: reload\n          }\n        : {})}\n      /*eslint-enable */\n    >\n      <Card\n        className={classnames('card-action', {\n          'd-none': !visibility\n        })}\n      >\n        <CardHeader>\n          <CardTitle tag='h4'>{title}</CardTitle>\n          <div className='action-icons'>{renderIcons()}</div>\n        </CardHeader>\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\n          {children}\n        </CollapseWrapper>\n      </Card>\n    </BlockUiWrapper>\n  )\n}\n\nexport default CardActions\n\n// ** PropTypes\nCardActions.propTypes = {\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  collapseIcon: PropTypes.any,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\n    ) {\n      return new Error('Please provide a function to end reload!')\n    }\n  }\n}\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Custom Components\nimport Breadcrumbs from '@components/breadcrumbs'\nimport CardAction from '@components/card-actions'\n\n// ** Icons Imports\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { CardBody, CardText, Row, Col, Table } from 'reactstrap'\n\nconst CardActions = () => {\n  return (\n    <Fragment>\n      <Breadcrumbs title='Card Actions' data={[{ title: 'Cards' }, { title: 'Card Actions' }]} />\n      <Row>\n        <Col sm='12'>\n          <CardAction\n            title='Card Actions'\n            actions={['collapse', 'reload', 'remove']}\n            endReload={endLoading => {\n              setTimeout(() => endLoading(), 2000)\n            }}\n          >\n            <CardBody className='pt-0'>\n              <Table responsive bordered>\n                <thead>\n                  <tr>\n                    <th>Action</th>\n                    <th>Icon</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Collapse</td>\n                    <td className='text-center'>\n                      <ChevronDown className='collapse-icon' size={15} />\n                    </td>\n                    <td> Collapse card content using collapse action.</td>\n                  </tr>\n                  <tr>\n                    <td>Refresh Content</td>\n                    <td className='text-center'>\n                      <RotateCw size={15} />\n                    </td>\n                    <td>Refresh your card content using refresh action.</td>\n                  </tr>\n                  <tr>\n                    <td>Remove Card</td>\n                    <td className='text-center'>\n                      <X size={15} />\n                    </td>\n                    <td> Remove card from page using remove card action</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </CardBody>\n          </CardAction>\n        </Col>\n      </Row>\n      <Row>\n        <Col md='6' sm='12'>\n          <CardAction title='Collapse' actions='collapse'>\n            <CardBody className='pt-0'>\n              <CardText>\n                You can create a collapsible content by using our <code>CardAction</code> component and by passing prop{' '}\n                <code>actions='collapse'</code>.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <ChevronDown size={15} /> to see card collapse in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n        <Col md='6' sm='12'>\n          <CardAction\n            title='Reload'\n            actions='reload'\n            endReload={endLoading => {\n              setTimeout(() => endLoading(), 2000)\n            }}\n          >\n            <CardBody className='pt-0'>\n              <CardText>\n                To create a re-loadable card pass prop <code>actions='reload'</code> and pass prop{' '}\n                <code>endReload</code> to end the loading.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <RotateCw size={15} /> to see card refresh in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n        <Col md='6' sm='12'>\n          <CardAction title='Remove' actions='remove'>\n            <CardBody className='pt-0'>\n              <CardText>\n                You can add refresh content action to card by adding class <code>.card-reload</code> with your card tag,\n                and add conditional spinner into card body to show when card is refreshing.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <RotateCw size={15} /> to see card refresh in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default CardActions\n"],"sourceRoot":""}