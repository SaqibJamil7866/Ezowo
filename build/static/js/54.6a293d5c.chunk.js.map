{"version":3,"sources":["views/apps/calendar/Calendar.js","views/apps/calendar/AddEventSidebar.js","views/apps/calendar/index.js","assets/images/pages/calendar-illustration.png"],"names":["Calendar","props","useState","tasks","setTasks","calendarRef","useRef","isRtl","dispatch","calendarsColor","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","useEffect","params","projectId","startDate","endDate","user_id","JSON","parse","localStorage","getItem","id","getAllCalendarTasks","then","result","response","code","data","finalData","i","length","start","Date","getTime","end","extendedProps","calendar","events","calendarOptions","plugins","interactionPlugin","dayGridPlugin","timeGridPlugin","listPlugin","initialView","headerToolbar","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","calendarEvent","event","colorName","_def","eventClick","clickedEvent","customButtons","sidebarToggle","text","className","click","dateClick","info","ev","date","eventDrop","droppedEvent","toast","success","eventResize","resizedEvent","ref","direction","memo","AddEventSidebar","open","store","addEvent","calendarApi","removeEvent","refetchEvents","selectedEvent","useForm","defaultValues","title","control","setError","setValue","getValues","handleSubmit","errors","formState","url","setUrl","desc","setDesc","guests","setGuests","allDay","setAllDay","location","setLocation","endPicker","setEndPicker","startPicker","setStartPicker","value","label","color","calendarLabel","setCalendarLabel","guestsOptions","avatar","img1","img2","img3","img4","img5","img6","handleUpdateEvent","eventToUpdate","display","undefined","description","updatedEventData","propsToUpdate","extendedPropsToUpdate","existingEvent","getEventById","index","propName","setProp","setDates","setExtendedProp","updateEventInCalendar","type","handleDeleteEvent","eventId","remove","error","EventActions","isObjEmpty","onClick","outline","CloseBtn","size","isOpen","toggle","onOpened","onClosed","contentClassName","modalClassName","close","tag","options","wheelPropagation","onSubmit","obj","handleAddEvent","for","name","render","field","placeholder","invalid","theme","selectThemeColors","classNamePrefix","isClearable","onChange","components","Option","required","enableTime","dateFormat","checked","e","target","isMulti","img","rows","Business","Holiday","Personal","Family","ETC","CalendarComponent","useDispatch","useSelector","state","setCalendarApi","leftSidebarOpen","setLeftSidebarOpen","useRTL","val","fetchEvents","selectedCalendars","classnames","show"],"mappings":"uQAiBMA,EAAW,SAAAC,GAEf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAcC,iBAAO,MAIzBC,EAWEN,EAXFM,MAEAC,EASEP,EATFO,SACAC,EAQER,EARFQ,eAGAC,EAKET,EALFS,sBACAC,EAIEV,EAJFU,WACAC,EAGEX,EAHFW,cACAC,EAEEZ,EAFFY,YACAC,EACEb,EADFa,YAYFC,qBAAU,WACR,IAGMC,EAAS,CACbC,UAAW,GACXC,UAAW,aACXC,QAAS,aACTC,QAASC,KAAKC,MAAMC,aAAaC,QAAQ,aAAaC,IAItDC,YAAoBV,GAAQW,MAAK,SAACC,GAChC,GAAIA,GAAUA,EAAOC,WAAsC,MAAzBD,EAAOC,SAASC,MAAyC,MAAzBF,EAAOC,SAASC,OAAiBF,EAAOC,SAASE,KAAM,CAoBvH,IADA,IAAMC,EAAYJ,EAAOC,SAASE,KACzBE,EAAI,EAAGA,EAAID,EAAUE,OAAQD,IAEpCD,EAAUC,GAAGE,MAAQ,IAAIC,MAAK,IAAIA,MAAOC,UAAY,OAErDL,EAAUC,GAAGK,IAAM,IAAIF,MAAK,IAAIA,MAAOC,UAAY,QACnDL,EAAUC,GAAGM,cAAgB,CAACC,SAAU,YAG1CpC,EAAS,CAAEqC,OAAQT,UAiCxB,IAGH,IAAMU,EAAkB,CACtBD,OAAQtC,EACRwC,QAAS,CAACC,IAAmBC,IAAeC,IAAgBC,KAC5DC,YAAa,eACbC,cAAe,CACbd,MAAO,kCAEPG,IAAK,yCAMPY,UAAU,EAMVC,yBAAyB,EAMzBC,YAAY,EAMZC,aAAc,EAMdC,UAAU,EAEVC,gBAvCsB,YAuCqB,IAAlBC,EAAiB,EAAxBC,MAEVC,EAAYjD,EAAe+C,EAAcG,KAAKpB,cAAcC,UAElE,MAAO,oBAEOkB,KAIhBE,WAjDsB,YAiDe,IAAjBC,EAAgB,EAAvBJ,MACXjD,EAASK,EAAYgD,IACrBnD,KAUFoD,cAAe,CACbC,cAAe,CACbC,KAAM,cAAC,IAAD,CAAMC,UAAU,sBACtBC,MAFa,WAGXtD,GAAc,MAKpBuD,UAtEsB,SAsEZC,GACR,IAAMC,EAAK1D,EACX0D,EAAGlC,MAAQiC,EAAKE,KAChBD,EAAG/B,IAAM8B,EAAKE,KACd9D,EAASK,EAAYwD,IACrB3D,KAQF6D,UAnFsB,YAmFc,IAAjBC,EAAgB,EAAvBf,MACVjD,EAASM,EAAY0D,IACrBC,IAAMC,QAAQ,kBAOhBC,YA5FsB,YA4FgB,IAAjBC,EAAgB,EAAvBnB,MACZjD,EAASM,EAAY8D,IACrBH,IAAMC,QAAQ,kBAGhBG,IAAKxE,EAGLyE,UAAWvE,EAAQ,MAAQ,OAG7B,OACE,cAAC,IAAD,CAAM0D,UAAU,sCAAhB,SACE,eAAC,IAAD,CAAUA,UAAU,OAApB,UACE,cAAC,IAAD,eAAkBvB,IAAoB,UAM/BqC,iBAAK/E,G,kNC2NLgF,EAvaS,SAAA/E,GAEtB,IACEgF,EAWEhF,EAXFgF,KACAC,EAUEjF,EAVFiF,MACA1E,EASEP,EATFO,SACA2E,EAQElF,EARFkF,SACAC,EAOEnF,EAPFmF,YACAvE,EAMEZ,EANFY,YACAC,EAKEb,EALFa,YACAuE,EAIEpF,EAJFoF,YACAC,EAGErF,EAHFqF,cACA7E,EAEER,EAFFQ,eACAC,EACET,EADFS,sBAII6E,EAAgBL,EAAMK,cAAtB,EAQAC,YAAQ,CACVC,cAAe,CAAEC,MAAO,MAPxBC,EAFE,EAEFA,QACAC,EAHE,EAGFA,SACAC,EAJE,EAIFA,SACAC,EALE,EAKFA,UACAC,EANE,EAMFA,aACaC,EAPX,EAOFC,UAAaD,OAMjB,EAAsB9F,mBAAS,IAA/B,mBAAOgG,EAAP,KAAYC,EAAZ,KACA,EAAwBjG,mBAAS,IAAjC,mBAAOkG,EAAP,KAAaC,EAAb,KACA,EAA4BnG,mBAAS,IAArC,mBAAOoG,GAAP,KAAeC,GAAf,KACA,GAA4BrG,oBAAS,GAArC,qBAAOsG,GAAP,MAAeC,GAAf,MACA,GAAgCvG,mBAAS,IAAzC,qBAAOwG,GAAP,MAAiBC,GAAjB,MACA,GAAkCzG,mBAAS,IAAIkC,MAA/C,qBAAOwE,GAAP,MAAkBC,GAAlB,MACA,GAAsC3G,mBAAS,IAAIkC,MAAnD,qBAAO0E,GAAP,MAAoBC,GAApB,MACA,GAA0C7G,mBAAS,CAAC,CAAE8G,MAAO,WAAYC,MAAO,WAAYC,MAAO,aAAnG,qBAAOC,GAAP,MAAsBC,GAAtB,MAWMC,GAAgB,CACpB,CAAEL,MAAO,cAAeC,MAAO,cAAeK,OAAQC,WACtD,CAAEP,MAAO,cAAeC,MAAO,cAAeK,OAAQE,WACtD,CAAER,MAAO,sBAAuBC,MAAO,sBAAuBK,OAAQG,WACtE,CAAET,MAAO,cAAeC,MAAO,cAAeK,OAAQI,WACtD,CAAEV,MAAO,aAAcC,MAAO,aAAcK,OAAQK,WACpD,CAAEX,MAAO,aAAcC,MAAO,aAAcK,OAAQM,YAiHhDC,GAAoB,WACxB,GAAI/B,EAAU,SAAS5D,OAAQ,CAC7B,IAAM4F,EAAgB,CACpBrG,GAAI8D,EAAc9D,GAClBiE,MAAOI,EAAU,SACjBU,UACArE,MAAO2E,GACPxE,IAAKsE,GACLV,MACA6B,SAAoB,IAAXvB,GAAmB,aAAUwB,EACtCzF,cAAe,CACbmE,YACAuB,YAAa7B,EACbE,UACA9D,SAAU2E,GAAc,GAAGF,QAM/BzG,EAASM,EAAYgH,IAhDK,SAACI,EAAkBC,EAAeC,GAO9D,IANA,IAAMC,EAAgBjD,EAAYkD,aAAaJ,EAAiBzG,IAMvD8G,EAAQ,EAAGA,EAAQJ,EAAcjG,OAAQqG,IAAS,CACzD,IAAMC,EAAWL,EAAcI,GAC/BF,EAAcI,QAAQD,EAAUN,EAAiBM,IAKnDH,EAAcK,SAAS,IAAItG,KAAK8F,EAAiB/F,OAAQ,IAAIC,KAAK8F,EAAiB5F,KAAM,CACvFkE,OAAQ0B,EAAiB1B,SAM3B,IAAK,IAAI+B,EAAQ,EAAGA,EAAQH,EAAsBlG,OAAQqG,IAAS,CACjE,IAAMC,EAAWJ,EAAsBG,GACvCF,EAAcM,gBAAgBH,EAAUN,EAAiB3F,cAAciG,KA0BvEI,CAAsBd,EAHA,CAAC,KAAM,QAAS,OACR,CAAC,WAAY,SAAU,WAAY,gBAIjEpH,IACA+D,IAAMC,QAAQ,sBAEdkB,EAAS,QAAS,CAChBiD,KAAM,YAUNC,GAAoB,WAJI,IAAAC,EAK5BvI,EAAS6E,EAAYE,EAAc9D,KALPsH,EAMNxD,EAAc9D,GALpC2D,EAAYkD,aAAaS,GAASC,SAMlCtI,IACA+D,IAAMwE,MAAM,kBAIRC,GAAe,WACnB,OAAIC,YAAW5D,KAAoB4D,YAAW5D,KAAmBA,EAAcG,MAAMxD,OAEjF,eAAC,WAAD,WACE,cAAC,IAAD,CAAQ+B,UAAU,OAAO4E,KAAK,SAAS3B,MAAM,UAA7C,iBAGA,cAAC,IAAD,CAAQA,MAAM,YAAY2B,KAAK,QAAQO,QAAS1I,EAAuB2I,SAAO,EAA9E,uBAOF,eAAC,WAAD,WACE,cAAC,IAAD,CAAQpF,UAAU,OAAOiD,MAAM,UAAUkC,QAASvB,GAAlD,oBAGA,cAAC,IAAD,CAAQX,MAAM,SAASkC,QAASN,GAAmBO,SAAO,EAA1D,wBASFC,GAAW,cAAC,IAAD,CAAGrF,UAAU,iBAAiBsF,KAAM,GAAIH,QAAS1I,IAElE,OACE,eAAC,IAAD,CACE8I,OAAQvE,EACRhB,UAAU,aACVwF,OAAQ/I,EACRgJ,SAnIwB,WAC1B,IAAKP,YAAW5D,GAAgB,CAC9B,IAAM/C,EAAW+C,EAAchD,cAAcC,SAS7CqD,EAAS,QAASN,EAAcG,OAASI,EAAU,UACnDW,GAAUlB,EAAciB,QAAUA,IAClCL,EAAOZ,EAAcW,KAAOA,GAC5BS,GAAYpB,EAAchD,cAAcmE,UAAYA,IACpDL,EAAQd,EAAchD,cAAc0F,aAAe7B,GACnDG,GAAUhB,EAAchD,cAAc+D,QAAUA,IAChDS,GAAe,IAAI3E,KAAKmD,EAAcpD,QACtC0E,GAAatB,EAAciB,OAAS,IAAIpE,KAAKmD,EAAcpD,OAAS,IAAIC,KAAKmD,EAAcjD,MAC3F8E,GAAiB,CAdX5E,EAASN,OACJ,CAAE+E,MAAOzE,EAAUwE,MAAOxE,EAAU0E,MAAOzG,EAAe+B,IAE1D,CAAEwE,MAAO,WAAYC,MAAO,WAAYC,MAAO,eA4H1DyC,SAlJ2B,WAC7BnJ,EAASK,EAAY,KACrBgF,EAAS,QAAS,IAClBY,IAAU,GACVN,EAAO,IACPQ,GAAY,IACZN,EAAQ,IACRE,GAAU,IACVa,GAAiB,CAAC,CAAEJ,MAAO,WAAYC,MAAO,WAAYC,MAAO,aACjEH,GAAe,IAAI3E,MACnByE,GAAa,IAAIzE,OAyIfwH,iBAAiB,sBACjBC,eAAe,+BAPjB,UASE,cAAC,IAAD,CAAa5F,UAAU,OAAOwF,OAAQ/I,EAAuBoJ,MAAOR,GAAUS,IAAI,MAAlF,SACE,qBAAI9F,UAAU,cAAd,UACGsB,GAAiBA,EAAcG,OAASH,EAAcG,MAAMxD,OAAS,SAAW,MADnF,cAIF,cAAC,IAAD,CAAkB8H,QAAS,CAAEC,kBAAkB,GAA/C,SACE,cAAC,IAAD,CAAWhG,UAAU,2BAArB,SACE,eAAC,IAAD,CACEiG,SAAUnE,GAAa,SAAAhE,GACjBA,EAAK2D,MAAMxD,OACTiH,YAAWnD,KACTmD,YAAW5D,KAAoB4D,YAAW5D,KAAmBA,EAAcG,MAAMxD,OAvL9E,WACrB,IAAMiI,EAAM,CACVzE,MAAOI,EAAU,SACjB3D,MAAO2E,GACPxE,IAAKsE,GACLJ,UACAuB,QAAS,QACTxF,cAAe,CACbC,SAAU2E,GAAc,GAAGF,MAC3Bf,IAAKA,EAAIhE,OAASgE,OAAM8B,EACxB1B,OAAQA,GAAOpE,OAASoE,QAAS0B,EACjCtB,SAAUA,GAASxE,OAASwE,QAAWsB,EACvC5B,KAAMA,EAAKlE,OAASkE,OAAO4B,IAG/BxH,EAAS2E,EAASgF,IAClB7E,IACA5E,IACA+D,IAAMC,QAAQ,eAsKE0F,GAEAvC,KAEFnH,KAGFkF,EAAS,QAAS,CAChBiD,KAAM,cAbd,UAkBE,sBAAK5E,UAAU,OAAf,UACE,eAAC,IAAD,CAAOA,UAAU,aAAaoG,IAAI,QAAlC,mBACQ,sBAAMpG,UAAU,cAAhB,kBAER,cAAC,IAAD,CACEqG,KAAK,QACL3E,QAASA,EACT4E,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,cAAC,IAAD,aAAO/I,GAAG,QAAQgJ,YAAY,QAAQC,QAAS1E,EAAON,QAAS,GAAU8E,UAK/E,sBAAKvG,UAAU,OAAf,UACE,cAAC,IAAD,CAAOA,UAAU,aAAaoG,IAAI,QAAlC,mBAGA,cAAC,IAAD,CACE5I,GAAG,QACHuF,MAAOG,GACP6C,QAhQE,CACd,CAAEhD,MAAO,WAAYC,MAAO,WAAYC,MAAO,WAC/C,CAAEF,MAAO,WAAYC,MAAO,WAAYC,MAAO,UAC/C,CAAEF,MAAO,SAAUC,MAAO,SAAUC,MAAO,WAC3C,CAAEF,MAAO,UAAWC,MAAO,UAAWC,MAAO,WAC7C,CAAEF,MAAO,MAAOC,MAAO,MAAOC,MAAO,SA4PzByD,MAAOC,IACP3G,UAAU,eACV4G,gBAAgB,SAChBC,aAAa,EACbC,SAAU,SAAAhJ,GAAI,OAAIqF,GAAiB,CAACrF,KACpCiJ,WAAY,CACVC,OArPQ,SAAC,GAAwB,IAAtBlJ,EAAqB,EAArBA,KAAS9B,EAAY,iBAC9C,OACE,eAAC,IAAWgL,OAAZ,2BAAuBhL,GAAvB,cACE,sBAAMgE,UAAS,wBAAmBlC,EAAKmF,MAAxB,sBACdnF,EAAKkF,iBAsPF,sBAAKhD,UAAU,OAAf,UACE,cAAC,IAAD,CAAOA,UAAU,aAAaoG,IAAI,YAAlC,wBAGA,cAAC,IAAD,CACEa,UAAQ,EACRzJ,GAAG,YACH6I,KAAK,YACLrG,UAAU,eACV8G,SAAU,SAAAzG,GAAI,OAAIyC,GAAezC,EAAK,KACtC0C,MAAOF,GACPkD,QAAS,CACPmB,YAAuB,IAAX3E,GACZ4E,WAAY,kBAKlB,sBAAKnH,UAAU,OAAf,UACE,cAAC,IAAD,CAAOA,UAAU,aAAaoG,IAAI,UAAlC,sBAGA,cAAC,IAAD,CACEa,UAAQ,EACRzJ,GAAG,UAEH6I,KAAK,UACLrG,UAAU,eACV8G,SAAU,SAAAzG,GAAI,OAAIuC,GAAavC,EAAK,KACpC0C,MAAOJ,GACPoD,QAAS,CACPmB,YAAuB,IAAX3E,GACZ4E,WAAY,kBAKlB,sBAAKnH,UAAU,mBAAf,UACE,cAAC,IAAD,CACExC,GAAG,SACHoH,KAAK,SACL5E,UAAU,OACVoH,QAAS7E,GACT8D,KAAK,eACLS,SAAU,SAAAO,GAAC,OAAI7E,GAAU6E,EAAEC,OAAOF,YAEpC,cAAC,IAAD,CAAOpH,UAAU,aAAaoG,IAAI,SAAlC,wBAKF,sBAAKpG,UAAU,OAAf,UACE,cAAC,IAAD,CAAOA,UAAU,aAAaoG,IAAI,WAAlC,uBAGA,cAAC,IAAD,CACExB,KAAK,MACLpH,GAAG,WACHuF,MAAOd,EACP6E,SAAU,SAAAO,GAAC,OAAInF,EAAOmF,EAAEC,OAAOvE,QAC/ByD,YAAY,8BAIhB,sBAAKxG,UAAU,OAAf,UACE,cAAC,IAAD,CAAOA,UAAU,aAAaoG,IAAI,SAAlC,oBAGA,cAAC,IAAD,CACEmB,SAAO,EACP/J,GAAG,SACHwC,UAAU,eACV4G,gBAAgB,SAChBC,aAAa,EACbd,QAAS3C,GACTsD,MAAOC,IACP5D,MAAOV,GAAOpE,OAAP,YAAoBoE,IAAU,KACrCyE,SAAU,SAAAhJ,GAAI,OAAIwE,GAAU,YAAIxE,KAChCiJ,WAAY,CACVC,OAhUQ,SAAC,GAAwB,IAAtBlJ,EAAqB,EAArBA,KAAS9B,EAAY,iBAC9C,OACE,cAAC,IAAWgL,OAAZ,2BAAuBhL,GAAvB,aACE,sBAAKgE,UAAU,sCAAf,UACE,cAAC,IAAD,CAAQA,UAAU,YAAYsF,KAAK,KAAKkC,IAAK1J,EAAKuF,SAClD,8BAAMvF,EAAKkF,qBAgUT,sBAAKhD,UAAU,OAAf,UACE,cAAC,IAAD,CAAOA,UAAU,aAAaoG,IAAI,WAAlC,sBAGA,cAAC,IAAD,CAAO5I,GAAG,WAAWuF,MAAON,GAAUqE,SAAU,SAAAO,GAAC,OAAI3E,GAAY2E,EAAEC,OAAOvE,QAAQyD,YAAY,cAGhG,sBAAKxG,UAAU,OAAf,UACE,cAAC,IAAD,CAAOA,UAAU,aAAaoG,IAAI,cAAlC,yBAGA,cAAC,IAAD,CACExB,KAAK,WACLyB,KAAK,OACL7I,GAAG,cACHiK,KAAK,IACL1E,MAAOZ,EACP2E,SAAU,SAAAO,GAAC,OAAIjF,EAAQiF,EAAEC,OAAOvE,QAChCyD,YAAY,mBAGhB,qBAAKxG,UAAU,cAAf,SACE,cAACiF,GAAD,iB,2BCtaRzI,G,QAAiB,CACrBkL,SAAU,UACVC,QAAS,UACTC,SAAU,SACVC,OAAQ,UACRC,IAAK,SA8GQC,UA3GW,WAExB,IAAMxL,EAAWyL,cACX/G,EAAQgH,aAAY,SAAAC,GAAK,OAAIA,EAAM3J,YAGzC,EAAsCtC,mBAAS,MAA/C,mBAAOkF,EAAP,KAAoBgH,EAApB,KAEA,EAA8ClM,oBAAS,GAAvD,mBAAOmM,EAAP,KAAwBC,EAAxB,KAGA,EAAgBC,cAAThM,EAAP,oBAGMG,EAAwB,aAKxBE,EAAgB,SAAA4L,GAAG,OAAIF,EAAmBE,IA6BhD,OAJAzL,qBAAU,WACRP,EAASiM,YAAYvH,EAAMwH,sBAC1B,IAGD,eAAC,WAAD,WACE,qBAAKzI,UAAU,sCAAf,SACE,eAAC,KAAD,CAAKA,UAAU,MAAf,UAgBE,cAAC,IAAD,CAAKA,UAAU,oBAAf,SACE,cAAC,EAAD,CACE1D,MAAOA,EACP2E,MAAOA,EACP1E,SAAUA,EACVG,WAlDO,CACjB+E,MAAO,GACPvD,MAAO,GACPG,IAAK,GACLkE,QAAQ,EACRN,IAAK,GACL3D,cAAe,CACbC,SAAU,GACV8D,OAAQ,GACRI,SAAU,GACVuB,YAAa,KAyCL7C,YAAaA,EACbvE,YAAaA,IACbC,YAAaA,IACbF,cAAeA,EACfH,eAAgBA,EAChB2L,eAAgBA,EAChB1L,sBAAuBA,MAG3B,qBACEuD,UAAW0I,IAAW,uBAAwB,CAC5CC,MAA0B,IAApBP,IAERjD,QAAS,kBAAMxI,GAAc,WAInC,cAAC,EAAD,CACEsE,MAAOA,EACP1E,SAAUA,EACV2E,SAAUA,IAEVtE,YAAaA,IACbC,YAAaA,IACbuE,YAAaA,IACbD,YAAaA,EACbE,cA9DgB,WACA,OAAhBF,GACFA,EAAYE,iBA6DV7E,eAAgBA,EAChBC,sBAAuBA,S,uDCrI/B,OAAe,cAA0B","file":"static/js/54.6a293d5c.chunk.js","sourcesContent":["// ** React Import\nimport { useState, useEffect, useRef, memo, Fragment } from 'react'\n\n// ** Full Calendar & it's Plugins\nimport FullCalendar from '@fullcalendar/react'\nimport listPlugin from '@fullcalendar/list'\nimport dayGridPlugin from '@fullcalendar/daygrid'\nimport timeGridPlugin from '@fullcalendar/timegrid'\nimport interactionPlugin from '@fullcalendar/interaction'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { Menu } from 'react-feather'\nimport { Card, CardBody } from 'reactstrap'\n\nimport { getAllCalendarTasks } from \"../../../services/Apis\"\n\nconst Calendar = props => {\n\n  const [tasks, setTasks] = useState([])\n  // ** Refs\n  const calendarRef = useRef(null)\n\n  // ** Props\n  const {\n    isRtl,\n    // store,\n    dispatch,\n    calendarsColor,\n    // calendarApi,\n    // setCalendarApi,\n    handleAddEventSidebar,\n    blankEvent,\n    toggleSidebar,\n    selectEvent,\n    updateEvent\n  } = props\n\n  // ** UseEffect checks for CalendarAPI Update\n  // useEffect(() => {\n  //   // console.error('DATA ', calendarRef.current.getApi())\n  //   console.error(' DATA ', store.events)\n  //   if (calendarApi === null) {\n  //     setCalendarApi(calendarRef.current.getApi())\n  //   }\n  // }, [calendarApi])\n\n  useEffect(() => {\n    const projectId = ''\n    const startDate = '2022-09-01'\n    const endDate = '2023-01-31'\n    const params = {\n      projectId: '',\n      startDate: '2000-01-01',\n      endDate: '2099-12-31',\n      user_id: JSON.parse(localStorage.getItem('userData')).id\n    }\n    // 2022-09-01&end_date=2023-01-31\n    \n      getAllCalendarTasks(params).then((result) => {\n        if (result && result.response && (result.response.code === 200 || result.response.code === 400) && result.response.data) {\n          // const date = moment().format()\n          // eslint-disable-next-line no-mixed-operators\n          // const nextDay = moment().format()//new Date(new Date().getTime() + 24 * 60 * 60 * 1000)\n          // const finalData = [\n          //   {\n          //     id: 1,\n          //     url: '',\n          //     title: 'Design Review',\n          //     start: date,\n          //     end: nextDay,\n          //     allDay: false,\n          //     extendedProps: {\n          //       calendar: 'Business'\n          //     }\n          //   }\n          // ]\n        \n          \n          const finalData = result.response.data\n          for (let i = 0; i < finalData.length; i++) {\n            // eslint-disable-next-line no-mixed-operators\n            finalData[i].start = new Date(new Date().getTime() + 24 * 60 * 60 * 1000) //moment(finalData[i].start_date).format()\n            // eslint-disable-next-line no-mixed-operators\n            finalData[i].end = new Date(new Date().getTime() + 48 * 60 * 60 * 1000) //finalData[i].end_date\n            finalData[i].extendedProps = {calendar: 'Business'}\n          }\n          \n          setTasks({ events: finalData})\n        }\n      })\n\n    \n    // // const prevDay = new Date().getDate() - 1\n    // // eslint-disable-next-line no-mixed-operators\n    // console.error(date)\n    // console.error(nextDay)\n\n    // prettier-ignore\n    // const nextMonth = date.getMonth() === 11 ? new Date(date.getFullYear() + 1, 0, 1) : new Date(date.getFullYear(), date.getMonth() + 1, 1)\n    // prettier-ignore\n    // const prevMonth = date.getMonth() === 11 ? new Date(date.getFullYear() - 1, 0, 1) : new Date(date.getFullYear(), date.getMonth() - 1, 1)\n\n    // const data = {\n    //   events: [\n    //     {\n    //       id: 1,\n    //       url: '',\n    //       title: 'Design Review',\n    //       start: date,\n    //       end: nextDay,\n    //       allDay: false,\n    //       extendedProps: {\n    //         calendar: 'Business'\n    //       }\n    //     }\n    //   ]\n    // }\n\n    // setTasks(data)\n\n  }, [])\n\n  // ** calendarOptions(Props)\n  const calendarOptions = {\n    events: tasks,\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\n    initialView: 'dayGridMonth',\n    headerToolbar: {\n      start: 'sidebarToggle, prev,next, title',\n      // end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\n      end: 'dayGridMonth,timeGridWeek,timeGridDay'\n    },\n    /*\n      Enable dragging and resizing event\n      ? Docs: https://fullcalendar.io/docs/editable\n    */\n    editable: true,\n\n    /*\n      Enable resizing event from start\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\n    */\n    eventResizableFromStart: true,\n\n    /*\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\n      ? Docs: https://fullcalendar.io/docs/dragScroll\n    */\n    dragScroll: true,\n\n    /*\n      Max number of events within a given day\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\n    */\n    dayMaxEvents: 2,\n\n    /*\n      Determines if day names and week names are clickable\n      ? Docs: https://fullcalendar.io/docs/navLinks\n    */\n    navLinks: true,\n\n    eventClassNames({ event: calendarEvent }) {\n      // eslint-disable-next-line no-underscore-dangle\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\n\n      return [\n        // Background Color\n        `bg-light-${colorName}`\n      ]\n    },\n\n    eventClick({ event: clickedEvent }) {\n      dispatch(selectEvent(clickedEvent))\n      handleAddEventSidebar()\n\n      // * Only grab required field otherwise it goes in infinity loop\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\n      // event.value = grabEventDataFromEventApi(clickedEvent)\n\n      // eslint-disable-next-line no-use-before-define\n      // isAddNewEventSidebarActive.value = true\n    },\n\n    customButtons: {\n      sidebarToggle: {\n        text: <Menu className='d-xl-none d-block' />,\n        click() {\n          toggleSidebar(true)\n        }\n      }\n    },\n\n    dateClick(info) {\n      const ev = blankEvent\n      ev.start = info.date\n      ev.end = info.date\n      dispatch(selectEvent(ev))\n      handleAddEventSidebar()\n    },\n\n    /*\n      Handle event drop (Also include dragged event)\n      ? Docs: https://fullcalendar.io/docs/eventDrop\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\n    */\n    eventDrop({ event: droppedEvent }) {\n      dispatch(updateEvent(droppedEvent))\n      toast.success('Event Updated')\n    },\n\n    /*\n      Handle event resize\n      ? Docs: https://fullcalendar.io/docs/eventResize\n    */\n    eventResize({ event: resizedEvent }) {\n      dispatch(updateEvent(resizedEvent))\n      toast.success('Event Updated')\n    },\n\n    ref: calendarRef,\n\n    // Get direction from app state (store)\n    direction: isRtl ? 'rtl' : 'ltr'\n  }\n\n  return (\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\n      <CardBody className='pb-0'>\n        <FullCalendar {...calendarOptions} />{' '}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default memo(Calendar)\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport { X } from 'react-feather'\nimport toast from 'react-hot-toast'\nimport Flatpickr from 'react-flatpickr'\nimport Select, { components } from 'react-select' // eslint-disable-line\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { useForm, Controller } from 'react-hook-form'\n\n// ** Reactstrap Imports\nimport { Button, Modal, ModalHeader, ModalBody, Label, Input, Form } from 'reactstrap'\n\n// ** Utils\nimport { selectThemeColors, isObjEmpty } from '@utils'\n\n// ** Avatar Images\nimport img1 from '@src/assets/images/avatars/1-small.png'\nimport img2 from '@src/assets/images/avatars/3-small.png'\nimport img3 from '@src/assets/images/avatars/5-small.png'\nimport img4 from '@src/assets/images/avatars/7-small.png'\nimport img5 from '@src/assets/images/avatars/9-small.png'\nimport img6 from '@src/assets/images/avatars/11-small.png'\n\n// ** Styles Imports\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\n\nconst AddEventSidebar = props => {\n  // ** Props\n  const {\n    open,\n    store,\n    dispatch,\n    addEvent,\n    calendarApi,\n    selectEvent,\n    updateEvent,\n    removeEvent,\n    refetchEvents,\n    calendarsColor,\n    handleAddEventSidebar\n  } = props\n\n  // ** Vars & Hooks\n  const selectedEvent = store.selectedEvent,\n    {\n      control,\n      setError,\n      setValue,\n      getValues,\n      handleSubmit,\n      formState: { errors }\n    } = useForm({\n      defaultValues: { title: '' }\n    })\n\n  // ** States\n  const [url, setUrl] = useState('')\n  const [desc, setDesc] = useState('')\n  const [guests, setGuests] = useState({})\n  const [allDay, setAllDay] = useState(false)\n  const [location, setLocation] = useState('')\n  const [endPicker, setEndPicker] = useState(new Date())\n  const [startPicker, setStartPicker] = useState(new Date())\n  const [calendarLabel, setCalendarLabel] = useState([{ value: 'Business', label: 'Business', color: 'primary' }])\n\n  // ** Select Options\n  const options = [\n    { value: 'Business', label: 'Business', color: 'primary' },\n    { value: 'Personal', label: 'Personal', color: 'danger' },\n    { value: 'Family', label: 'Family', color: 'warning' },\n    { value: 'Holiday', label: 'Holiday', color: 'success' },\n    { value: 'ETC', label: 'ETC', color: 'info' }\n  ]\n\n  const guestsOptions = [\n    { value: 'Donna Frank', label: 'Donna Frank', avatar: img1 },\n    { value: 'Jane Foster', label: 'Jane Foster', avatar: img2 },\n    { value: 'Gabrielle Robertson', label: 'Gabrielle Robertson', avatar: img3 },\n    { value: 'Lori Spears', label: 'Lori Spears', avatar: img4 },\n    { value: 'Sandy Vega', label: 'Sandy Vega', avatar: img5 },\n    { value: 'Cheryl May', label: 'Cheryl May', avatar: img6 }\n  ]\n\n  // ** Custom select components\n  const OptionComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <span className={`bullet bullet-${data.color} bullet-sm me-50`}></span>\n        {data.label}\n      </components.Option>\n    )\n  }\n\n  const GuestsComponent = ({ data, ...props }) => {\n    return (\n      <components.Option {...props}>\n        <div className='d-flex flex-wrap align-items-center'>\n          <Avatar className='my-0 me-1' size='sm' img={data.avatar} />\n          <div>{data.label}</div>\n        </div>\n      </components.Option>\n    )\n  }\n\n  // ** Adds New Event\n  const handleAddEvent = () => {\n    const obj = {\n      title: getValues('title'),\n      start: startPicker,\n      end: endPicker,\n      allDay,\n      display: 'block',\n      extendedProps: {\n        calendar: calendarLabel[0].label,\n        url: url.length ? url : undefined,\n        guests: guests.length ? guests : undefined,\n        location: location.length ? location : undefined,\n        desc: desc.length ? desc : undefined\n      }\n    }\n    dispatch(addEvent(obj))\n    refetchEvents()\n    handleAddEventSidebar()\n    toast.success('Event Added')\n  }\n\n  // ** Reset Input Values on Close\n  const handleResetInputValues = () => {\n    dispatch(selectEvent({}))\n    setValue('title', '')\n    setAllDay(false)\n    setUrl('')\n    setLocation('')\n    setDesc('')\n    setGuests({})\n    setCalendarLabel([{ value: 'Business', label: 'Business', color: 'primary' }])\n    setStartPicker(new Date())\n    setEndPicker(new Date())\n  }\n\n  // ** Set sidebar fields\n  const handleSelectedEvent = () => {\n    if (!isObjEmpty(selectedEvent)) {\n      const calendar = selectedEvent.extendedProps.calendar\n\n      const resolveLabel = () => {\n        if (calendar.length) {\n          return { label: calendar, value: calendar, color: calendarsColor[calendar] }\n        } else {\n          return { value: 'Business', label: 'Business', color: 'primary' }\n        }\n      }\n      setValue('title', selectedEvent.title || getValues('title'))\n      setAllDay(selectedEvent.allDay || allDay)\n      setUrl(selectedEvent.url || url)\n      setLocation(selectedEvent.extendedProps.location || location)\n      setDesc(selectedEvent.extendedProps.description || desc)\n      setGuests(selectedEvent.extendedProps.guests || guests)\n      setStartPicker(new Date(selectedEvent.start))\n      setEndPicker(selectedEvent.allDay ? new Date(selectedEvent.start) : new Date(selectedEvent.end))\n      setCalendarLabel([resolveLabel()])\n    }\n  }\n\n  // ** (UI) updateEventInCalendar\n  const updateEventInCalendar = (updatedEventData, propsToUpdate, extendedPropsToUpdate) => {\n    const existingEvent = calendarApi.getEventById(updatedEventData.id)\n\n    // ** Set event properties except date related\n    // ? Docs: https://fullcalendar.io/docs/Event-setProp\n    // ** dateRelatedProps => ['start', 'end', 'allDay']\n    // ** eslint-disable-next-line no-plusplus\n    for (let index = 0; index < propsToUpdate.length; index++) {\n      const propName = propsToUpdate[index]\n      existingEvent.setProp(propName, updatedEventData[propName])\n    }\n\n    // ** Set date related props\n    // ? Docs: https://fullcalendar.io/docs/Event-setDates\n    existingEvent.setDates(new Date(updatedEventData.start), new Date(updatedEventData.end), {\n      allDay: updatedEventData.allDay\n    })\n\n    // ** Set event's extendedProps\n    // ? Docs: https://fullcalendar.io/docs/Event-setExtendedProp\n    // ** eslint-disable-next-line no-plusplus\n    for (let index = 0; index < extendedPropsToUpdate.length; index++) {\n      const propName = extendedPropsToUpdate[index]\n      existingEvent.setExtendedProp(propName, updatedEventData.extendedProps[propName])\n    }\n  }\n\n  // ** Updates Event in Store\n  const handleUpdateEvent = () => {\n    if (getValues('title').length) {\n      const eventToUpdate = {\n        id: selectedEvent.id,\n        title: getValues('title'),\n        allDay,\n        start: startPicker,\n        end: endPicker,\n        url,\n        display: allDay === false ? 'block' : undefined,\n        extendedProps: {\n          location,\n          description: desc,\n          guests,\n          calendar: calendarLabel[0].label\n        }\n      }\n\n      const propsToUpdate = ['id', 'title', 'url']\n      const extendedPropsToUpdate = ['calendar', 'guests', 'location', 'description']\n      dispatch(updateEvent(eventToUpdate))\n      updateEventInCalendar(eventToUpdate, propsToUpdate, extendedPropsToUpdate)\n\n      handleAddEventSidebar()\n      toast.success('Event Updated')\n    } else {\n      setError('title', {\n        type: 'manual'\n      })\n    }\n  }\n\n  // ** (UI) removeEventInCalendar\n  const removeEventInCalendar = eventId => {\n    calendarApi.getEventById(eventId).remove()\n  }\n\n  const handleDeleteEvent = () => {\n    dispatch(removeEvent(selectedEvent.id))\n    removeEventInCalendar(selectedEvent.id)\n    handleAddEventSidebar()\n    toast.error('Event Removed')\n  }\n\n  // ** Event Action buttons\n  const EventActions = () => {\n    if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\n      return (\n        <Fragment>\n          <Button className='me-1' type='submit' color='primary'>\n            Add\n          </Button>\n          <Button color='secondary' type='reset' onClick={handleAddEventSidebar} outline>\n            Cancel\n          </Button>\n        </Fragment>\n      )\n    } else {\n      return (\n        <Fragment>\n          <Button className='me-1' color='primary' onClick={handleUpdateEvent}>\n            Update\n          </Button>\n          <Button color='danger' onClick={handleDeleteEvent} outline>\n            Delete\n          </Button>\n        </Fragment>\n      )\n    }\n  }\n\n  // ** Close BTN\n  const CloseBtn = <X className='cursor-pointer' size={15} onClick={handleAddEventSidebar} />\n\n  return (\n    <Modal\n      isOpen={open}\n      className='sidebar-lg'\n      toggle={handleAddEventSidebar}\n      onOpened={handleSelectedEvent}\n      onClosed={handleResetInputValues}\n      contentClassName='p-0 overflow-hidden'\n      modalClassName='modal-slide-in event-sidebar'\n    >\n      <ModalHeader className='mb-1' toggle={handleAddEventSidebar} close={CloseBtn} tag='div'>\n        <h5 className='modal-title'>\n          {selectedEvent && selectedEvent.title && selectedEvent.title.length ? 'Update' : 'Add'} Event\n        </h5>\n      </ModalHeader>\n      <PerfectScrollbar options={{ wheelPropagation: false }}>\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\n          <Form\n            onSubmit={handleSubmit(data => {\n              if (data.title.length) {\n                if (isObjEmpty(errors)) {\n                  if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\n                    handleAddEvent()\n                  } else {\n                    handleUpdateEvent()\n                  }\n                  handleAddEventSidebar()\n                }\n              } else {\n                setError('title', {\n                  type: 'manual'\n                })\n              }\n            })}\n          >\n            <div className='mb-1'>\n              <Label className='form-label' for='title'>\n                Title <span className='text-danger'>*</span>\n              </Label>\n              <Controller\n                name='title'\n                control={control}\n                render={({ field }) => (\n                  <Input id='title' placeholder='Title' invalid={errors.title && true} {...field} />\n                )}\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='label'>\n                Label\n              </Label>\n              <Select\n                id='label'\n                value={calendarLabel}\n                options={options}\n                theme={selectThemeColors}\n                className='react-select'\n                classNamePrefix='select'\n                isClearable={false}\n                onChange={data => setCalendarLabel([data])}\n                components={{\n                  Option: OptionComponent\n                }}\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='startDate'>\n                Start Date\n              </Label>\n              <Flatpickr\n                required\n                id='startDate'\n                name='startDate'\n                className='form-control'\n                onChange={date => setStartPicker(date[0])}\n                value={startPicker}\n                options={{\n                  enableTime: allDay === false,\n                  dateFormat: 'Y-m-d H:i'\n                }}\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='endDate'>\n                End Date\n              </Label>\n              <Flatpickr\n                required\n                id='endDate'\n                // tag={Flatpickr}\n                name='endDate'\n                className='form-control'\n                onChange={date => setEndPicker(date[0])}\n                value={endPicker}\n                options={{\n                  enableTime: allDay === false,\n                  dateFormat: 'Y-m-d H:i'\n                }}\n              />\n            </div>\n\n            <div className='form-switch mb-1'>\n              <Input\n                id='allDay'\n                type='switch'\n                className='me-1'\n                checked={allDay}\n                name='customSwitch'\n                onChange={e => setAllDay(e.target.checked)}\n              />\n              <Label className='form-label' for='allDay'>\n                All Day\n              </Label>\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='eventURL'>\n                Event URL\n              </Label>\n              <Input\n                type='url'\n                id='eventURL'\n                value={url}\n                onChange={e => setUrl(e.target.value)}\n                placeholder='https://www.google.com'\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='guests'>\n                Guests\n              </Label>\n              <Select\n                isMulti\n                id='guests'\n                className='react-select'\n                classNamePrefix='select'\n                isClearable={false}\n                options={guestsOptions}\n                theme={selectThemeColors}\n                value={guests.length ? [...guests] : null}\n                onChange={data => setGuests([...data])}\n                components={{\n                  Option: GuestsComponent\n                }}\n              />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='location'>\n                Location\n              </Label>\n              <Input id='location' value={location} onChange={e => setLocation(e.target.value)} placeholder='Office' />\n            </div>\n\n            <div className='mb-1'>\n              <Label className='form-label' for='description'>\n                Description\n              </Label>\n              <Input\n                type='textarea'\n                name='text'\n                id='description'\n                rows='3'\n                value={desc}\n                onChange={e => setDesc(e.target.value)}\n                placeholder='Description'\n              />\n            </div>\n            <div className='d-flex mb-1'>\n              <EventActions />\n            </div>\n          </Form>\n        </ModalBody>\n      </PerfectScrollbar>\n    </Modal>\n  )\n}\n\nexport default AddEventSidebar\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { Row, Col } from 'reactstrap'\n\n// ** Calendar App Component Imports\nimport Calendar from './Calendar'\nimport SidebarLeft from './SidebarLeft'\nimport AddEventSidebar from './AddEventSidebar'\n\n// ** Custom Hooks\nimport { useRTL } from '@hooks/useRTL'\n\n// ** Store & Actions\nimport { useSelector, useDispatch } from 'react-redux'\n// import { fetchEvents, selectEvent, updateEvent, updateFilter, updateAllFilters, addEvent, removeEvent } from './store'\nimport { fetchEvents, selectEvent, updateEvent, addEvent, removeEvent } from './store'\n\n// ** Styles\nimport '@styles/react/apps/app-calendar.scss'\n\n// ** CalendarColors\nconst calendarsColor = {\n  Business: 'primary',\n  Holiday: 'success',\n  Personal: 'danger',\n  Family: 'warning',\n  ETC: 'info'\n}\n\nconst CalendarComponent = () => {\n  // ** Variables\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.calendar)\n\n  // ** states\n  const [calendarApi, setCalendarApi] = useState(null)\n  // const [addSidebarOpen, setAddSidebarOpen] = useState(false)\n  const [leftSidebarOpen, setLeftSidebarOpen] = useState(false)\n\n  // ** Hooks\n  const [isRtl] = useRTL()\n\n  // ** AddEventSidebar Toggle Function\n  const handleAddEventSidebar = () => {\n    // setAddSidebarOpen(!addSidebarOpen)\n  }\n\n  // ** LeftSidebar Toggle Function\n  const toggleSidebar = val => setLeftSidebarOpen(val)\n\n  // ** Blank Event Object\n  const blankEvent = {\n    title: '',\n    start: '',\n    end: '',\n    allDay: false,\n    url: '',\n    extendedProps: {\n      calendar: '',\n      guests: [],\n      location: '',\n      description: ''\n    }\n  }\n\n  // ** refetchEvents\n  const refetchEvents = () => {\n    if (calendarApi !== null) {\n      calendarApi.refetchEvents()\n    }\n  }\n\n  // ** Fetch Events On Mount\n  useEffect(() => {\n    dispatch(fetchEvents(store.selectedCalendars))\n  }, [])\n\n  return (\n    <Fragment>\n      <div className='app-calendar overflow-hidden border'>\n        <Row className='g-0'>\n          {/* <Col\n            id='app-calendar-sidebar'\n            className={classnames('col app-calendar-sidebar flex-grow-0 overflow-hidden d-flex flex-column', {\n              show: leftSidebarOpen\n            })}\n          >\n            <SidebarLeft\n              store={store}\n              dispatch={dispatch}\n              updateFilter={updateFilter}\n              toggleSidebar={toggleSidebar}\n              updateAllFilters={updateAllFilters}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col> */}\n          <Col className='position-relative'>\n            <Calendar\n              isRtl={isRtl}\n              store={store}\n              dispatch={dispatch}\n              blankEvent={blankEvent}\n              calendarApi={calendarApi}\n              selectEvent={selectEvent}\n              updateEvent={updateEvent}\n              toggleSidebar={toggleSidebar}\n              calendarsColor={calendarsColor}\n              setCalendarApi={setCalendarApi}\n              handleAddEventSidebar={handleAddEventSidebar}\n            />\n          </Col>\n          <div\n            className={classnames('body-content-overlay', {\n              show: leftSidebarOpen === true\n            })}\n            onClick={() => toggleSidebar(false)}\n          ></div>\n        </Row>\n      </div>\n      <AddEventSidebar\n        store={store}\n        dispatch={dispatch}\n        addEvent={addEvent}\n        // open={addSidebarOpen}\n        selectEvent={selectEvent}\n        updateEvent={updateEvent}\n        removeEvent={removeEvent}\n        calendarApi={calendarApi}\n        refetchEvents={refetchEvents}\n        calendarsColor={calendarsColor}\n        handleAddEventSidebar={handleAddEventSidebar}\n      />\n    </Fragment>\n  )\n}\n\nexport default CalendarComponent\n","export default __webpack_public_path__ + \"static/media/calendar-illustration.42be42ce.png\";"],"sourceRoot":""}