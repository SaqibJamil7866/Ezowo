{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","t","name","msg","error","className","size","color","icon","onClick","toast","dismiss","id","themeConfig","app","appName","defaultValues","loginEmail","password","Login","skin","useSkin","navigate","useNavigate","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","to","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","onSubmit","data","Object","values","every","field","length","processLogin","then","res","response","code","fullName","first_name","last_name","username","role","title","toLowerCase","localStorage","setItem","JSON","stringify","session","token","getHomeRouteForLoggedInUser","catch","err","console","log","key","type","for","render","autoFocus","placeholder","invalid","process","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","renderIcon","defaultProps"],"mappings":"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","file":"static/js/14.a42dc1d2.chunk.js","sourcesContent":["// ** React Imports\n// import { useContext } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\n\nimport { getHomeRouteForLoggedInUser } from '@utils'\n\n// ** Config\nimport themeConfig from '@configs/themeConfig'\n\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\n// import useJwt from '@src/auth/jwt/useJwt'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\n// import { useDispatch } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee, X } from 'react-feather'\n\n// ** Actions\n// import { handleLogin } from '@store/authentication'\n\n// ** Context\n// import { AbilityContext } from '@src/utility/context/Can'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Utils\n// import { getHomeRouteForLoggedInUser } from '@utils'\n\n// ** Reactstrap Imports\nimport { Row, Col, Form, Input, Label, Alert, Button, CardText, CardTitle, UncontrolledTooltip } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\n\nimport { processLogin } from \"../../../services/Apis\"\n\n// const ToastContent = ({ t, name}) => {\n//   return (\n//     <div className='d-flex'>\n//       <div className='me-1'>\n//         <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n//       </div>\n//       <div className='d-flex flex-column'>\n//         <div className='d-flex justify-content-between'>\n//           <h6>{name}</h6>\n//           <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\n//         </div>\n//         <span>You have successfully logged in to {themeConfig.app.appName}. Now you can start to explore. Enjoy!</span>\n//       </div>\n//     </div>\n//   )\n// }\nconst ToastContent = ({ t, name, msg, error }) => {\n  return (\n    <div className='d-flex'>\n      <div className='me-1'>\n        <Avatar size='sm' color={error ? 'danger' : 'success'} icon={<Coffee size={12} />} />\n      </div>\n      <div className='d-flex flex-column'>\n        <div className='d-flex justify-content-between'>\n          {name && \n          <><h6>{name}</h6>\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\n          </>\n          }\n        </div>\n        <span>{msg ? msg : <span>You have successfully logged in to {themeConfig.app.appName}. Now you can start to explore. Enjoy!</span>}</span>\n      </div>\n    </div>\n  )\n}\n\nconst defaultValues = {\n  loginEmail: 'rafaqatazam055@gmail.com',\n  password: '12345'\n}\n\nconst Login = () => {\n  // ** Hooks\n  const { skin } = useSkin()\n  // const dispatch = useDispatch()\n  const navigate = useNavigate()\n  // const ability = useContext(AbilityContext)\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg', source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const onSubmit = data => {\n    if (Object.values(data).every(field => field.length > 0)) {\n      \n      processLogin(data.loginEmail, data.password)\n        .then(res => {\n          if (res.response.code === 200) {\n            const data = res.response.data \n            data.fullName = `${data.first_name  } ${  data.last_name}`\n            data.username = data.first_name\n\n            data.role = data.role && data.role.title ? data.role.title.toLowerCase() : 'user'\n\n            localStorage.setItem('userData', JSON.stringify(data))\n            localStorage.setItem('token', data?.session?.token)\n            localStorage.setItem('accessToken', data?.session?.token)\n            localStorage.setItem('refreshToken', data?.session?.token)\n            \n            toast(t => (\n              <ToastContent t={t} name={data.fullName || data.username || 'N/A'} />\n            ))\n            navigate(getHomeRouteForLoggedInUser(data.role))\n          } else if (res.response.code === 500) {\n            toast(t => (\n              <ToastContent t={t} error={1} msg={res.response.msg} />\n            ))\n          }\n          \n        })\n        .catch(err => console.log('ERROR: ', err))\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual'\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ms-1'>{themeConfig.app.appName}</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='fw-bold mb-1'>\n              Welcome to {themeConfig.app.appName}! 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            {/* <Alert color='primary'>\n              <div className='alert-body font-small-2'>\n                <p>\n                  <small className='me-50'>\n                    <span className='fw-bold'>Admin:</span> admin@demo.com | admin\n                  </small>\n                </p>\n                <p>\n                  <small className='me-50'>\n                    <span className='fw-bold'>Client:</span> client@demo.com | client\n                  </small>\n                </p>\n              </div>\n              <HelpCircle\n                id='login-tip'\n                className='position-absolute'\n                size={18}\n                style={{ top: '10px', right: '10px' }}\n              />\n              <UncontrolledTooltip target='login-tip' placement='left'>\n                This is just for ACL demo purpose.\n              </UncontrolledTooltip>\n            </Alert> */}\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='loginEmail'\n                  name='loginEmail'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='email'\n                      placeholder='Your email address'\n                      invalid={errors.loginEmail && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                  <Link to={`${process.env.PUBLIC_URL}/forgot-password`}>\n                    <small>Forgot Password?</small>\n                  </Link>\n                </div>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n              </div>\n              {/* <div className='form-check mb-1'>\n                <Input type='checkbox' id='remember-me' />\n                <Label className='form-check-label' for='remember-me'>\n                  Remember Me\n                </Label>\n              </div> */}\n              <Button type='submit' color='primary' block>\n                Sign in\n              </Button>\n            </Form>\n            {/* <p className='text-center mt-2'>\n              <span className='me-25'>New on our platform?</span>\n              <Link to={`${process.env.PUBLIC_URL}/signup`}>\n                <span>Create an account</span>\n              </Link>\n            </p> */}\n            {/* <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button color='facebook'>\n                <Facebook size={14} />\n              </Button>\n              <Button color='twitter'>\n                <Twitter size={14} />\n              </Button>\n              <Button color='google'>\n                <Mail size={14} />\n              </Button>\n              <Button className='me-0' color='github'>\n                <GitHub size={14} />\n              </Button>\n            </div> */}\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}